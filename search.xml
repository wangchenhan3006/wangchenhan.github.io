<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java集合-LinkedList略解</title>
    <url>/2024/02/23/Linked/</url>
    <content><![CDATA[<h1 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h1><p>LinkedList集合实现了List,Queue,Duque等接口，可以作为集合或队列使用<br>LinkedList集合的底层是双向链表，因此，LinkedList适合做大量增删操作，不适合做元素查询操作</p>
<h2 id="双向链表简介："><a href="#双向链表简介：" class="headerlink" title="双向链表简介："></a>双向链表简介：</h2><p>双向链表的每个节点有三个值：此节点存储的元素，前一个节点存储的元素(first)，后一个节点存储的元素(last)<br>当链表为空时，first和last都指向null<br>创建LinkedList实例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//导入LinkedList所在的util包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiaowang</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">l.add(<span class="string">&quot;Hexo&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;blogxw&quot;</span>);</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Hexo, blogxw]</span><br></pre></td></tr></table></figure>
<h2 id="LinkedList新增方法"><a href="#LinkedList新增方法" class="headerlink" title="LinkedList新增方法"></a>LinkedList新增方法</h2><p>LinkedList在List的基础上新增了许多方法，使增删元素更便捷。</p>
<h3 id="1-在头部添加元素-使用addFirst-方法"><a href="#1-在头部添加元素-使用addFirst-方法" class="headerlink" title="1.在头部添加元素 使用addFirst()方法"></a>1.在头部添加元素 使用addFirst()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">l.add(<span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;gitee&quot;</span>);</span><br><span class="line">l.addFirst(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Github,CSDN,gitee]</span><br></pre></td></tr></table></figure>
<h3 id="2-在尾部添加元素-使用addLast-方法"><a href="#2-在尾部添加元素-使用addLast-方法" class="headerlink" title="2.在尾部添加元素 使用addLast()方法"></a>2.在尾部添加元素 使用addLast()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">l.add(<span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;gitee&quot;</span>);</span><br><span class="line">l.addFirst(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">l.addLast(<span class="string">&quot;Bilibili&quot;</span>);</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Github,CSDN,gitee,Bilibili];</span><br></pre></td></tr></table></figure>
<h3 id="3-删除头部元素-使用removeFirst-方法"><a href="#3-删除头部元素-使用removeFirst-方法" class="headerlink" title="3.删除头部元素 使用removeFirst()方法"></a>3.删除头部元素 使用removeFirst()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">l.add(<span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;gitee&quot;</span>);</span><br><span class="line">l.addFirst(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">l.addLast(<span class="string">&quot;Bilibili&quot;</span>);</span><br><span class="line">l.removeFirst();</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[CSDN,gitee,Bilibili]</span><br></pre></td></tr></table></figure>
<h3 id="4-删除尾部元素-使用removeLast-方法"><a href="#4-删除尾部元素-使用removeLast-方法" class="headerlink" title="4.删除尾部元素 使用removeLast()方法"></a>4.删除尾部元素 使用removeLast()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">l.add(<span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;gitee&quot;</span>);</span><br><span class="line">l.addFirst(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">l.addLast(<span class="string">&quot;Bilibili&quot;</span>);</span><br><span class="line">l.removeLast();</span><br><span class="line">System.out.println(l);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Github,CSDN,gitee]</span><br></pre></td></tr></table></figure>
<h3 id="5-获取头部元素-使用getFirst-方法"><a href="#5-获取头部元素-使用getFirst-方法" class="headerlink" title="5.获取头部元素 使用getFirst()方法"></a>5.获取头部元素 使用getFirst()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">l.add(<span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;gitee&quot;</span>);</span><br><span class="line">l.addFirst(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">l.addLast(<span class="string">&quot;Bilibili&quot;</span>);</span><br><span class="line">System.out.println(l.getFirst());</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Github</span><br></pre></td></tr></table></figure>
<h3 id="6-获取尾部元素-使用getLast-方法"><a href="#6-获取尾部元素-使用getLast-方法" class="headerlink" title="6.获取尾部元素 使用getLast()方法"></a>6.获取尾部元素 使用getLast()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">l.add(<span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;gitee&quot;</span>);</span><br><span class="line">l.addFirst(<span class="string">&quot;Github&quot;</span>);</span><br><span class="line">l.addLast(<span class="string">&quot;Bilibili&quot;</span>);</span><br><span class="line">System.out.println(l.getLast());</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bilibili</span><br></pre></td></tr></table></figure>
<p>常用方法:</p>
<ul>
<li>public boolean add(E e)    链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</li>
<li>public void add(int index, E element)    向指定位置插入元素。</li>
<li>public boolean addAll(Collection c)    将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。</li>
<li>public boolean addAll(int index, Collection c)    将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。</li>
<li>public void addFirst(E e)    元素添加到头部。</li>
<li>public void addLast(E e)    元素添加到尾部。</li>
<li>public boolean offer(E e)    向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</li>
<li>public boolean offerFirst(E e)    头部插入元素，返回是否成功，成功为 true，失败为 false。</li>
<li>public boolean offerLast(E e)    尾部插入元素，返回是否成功，成功为 true，失败为 false。</li>
<li>public void clear()    清空链表。</li>
<li>public E removeFirst()    删除并返回第一个元素。</li>
<li>public E removeLast()    删除并返回最后一个元素。</li>
<li>public boolean remove(Object o)    删除某一元素，返回是否成功，成功为 true，失败为 false。</li>
<li>public E remove(int index)    删除指定位置的元素。</li>
<li>public E poll()    删除并返回第一个元素。</li>
<li>public E remove()    删除并返回第一个元素。</li>
<li>public boolean contains(Object o)    判断是否含有某一元素。</li>
<li>public E get(int index)    返回指定位置的元素。</li>
<li>public E getFirst()    返回第一个元素。</li>
<li>public E getLast()    返回最后一个元素。</li>
<li>public int indexOf(Object o)    查找指定元素从前往后第一次出现的索引。</li>
<li>public int lastIndexOf(Object o)    查找指定元素最后一次出现的索引。</li>
<li>public E peek()    返回第一个元素。</li>
<li>public E element()    返回第一个元素。</li>
<li>public E peekFirst()    返回头部元素。</li>
<li>public E peekLast()    返回尾部元素。</li>
<li>public E set(int index, E element)    设置指定位置的元素。</li>
<li>public Object clone()    克隆该列表。</li>
<li>public Iterator descendingIterator()    返回倒序迭代器。</li>
<li>public int size()    返回链表元素个数。</li>
<li>public ListIterator listIterator(int index)    返回从指定位置开始到末尾的迭代器。</li>
<li>public Object[] toArray()    返回一个由链表元素组成的数组。</li>
<li>public T[] toArray(T[] a)    返回一个由链表元素转换类型而成的数组。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合-ArrayList略解</title>
    <url>/2024/02/23/List/</url>
    <content><![CDATA[<h1 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h1><p>集合就是一个容器，把多个对象存起来，方便操作<br>简单说就是“由若干个确定的元素所构成的整体” 数组ProMax</p>
<h1 id="为什么需要集合"><a href="#为什么需要集合" class="headerlink" title="为什么需要集合"></a>为什么需要集合</h1><p>集合高效，方便，快捷，扩展性高，对比数组不限制内存，用过的都说好</p>
<h1 id="如何使用集合"><a href="#如何使用集合" class="headerlink" title="如何使用集合"></a>如何使用集合</h1><p>集合的主要父接口是Collection和Map，一切的祖宗。由Collection扩展出了List，Set，Queue接口，本篇主要说List接口。<br>(Tip:使用集合需要使用import语句 import java.util.*;)<br>List的实现类是Vector,ArrayList和LinkedList，本篇主要说ArrayList。</p>
<h2 id="1-ArrayList集合"><a href="#1-ArrayList集合" class="headerlink" title="1.ArrayList集合"></a>1.ArrayList集合</h2><p>List集合的特点是有序，元素可重复。ArrayList实现了List接口，ArrayList底层是数组，所以集合中每个元素都有一个索引。<br>优点：每个元素都有索引，元素查询效率快<br>劣势：底层是数组，不适合做大量增删操作</p>
<h3 id="一-添加元素-使用add-方法在集合末尾追加元素"><a href="#一-添加元素-使用add-方法在集合末尾追加元素" class="headerlink" title="一.添加元素 使用add()方法在集合末尾追加元素"></a>一.添加元素 使用add()方法在集合末尾追加元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">l.add(<span class="string">&quot;Hello,World&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>List重载了一个add方法(void add(int index E e)),可以向指定索引处添加元素。（注意：index参数不可大于当前集合的容量)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">l.add(<span class="number">0</span>,<span class="string">&quot;Hello,World&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-删除元素-使用remove-方法删除元素"><a href="#2-删除元素-使用remove-方法删除元素" class="headerlink" title="2.删除元素 使用remove()方法删除元素"></a>2.删除元素 使用remove()方法删除元素</h3><p>可以使用remove(int index)从指定索引位置删除元素，也可以使用remove(Object o)删除元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">l.remove(<span class="string">&quot;Hello,World&quot;</span>); <span class="comment">//=l.remove(0);</span></span><br></pre></td></tr></table></figure>
<h3 id="3-清空元素-使用clear"><a href="#3-清空元素-使用clear" class="headerlink" title="3.清空元素 使用clear()"></a>3.清空元素 使用clear()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">l.clear();</span><br></pre></td></tr></table></figure>
<h3 id="4-判断集合中是否有此元素-使用contains-Object-o-方法。返回true（有此元素）与false（没有此元素"><a href="#4-判断集合中是否有此元素-使用contains-Object-o-方法。返回true（有此元素）与false（没有此元素" class="headerlink" title="4.判断集合中是否有此元素 使用contains(Object o)方法。返回true（有此元素）与false（没有此元素)"></a>4.判断集合中是否有此元素 使用contains(Object o)方法。返回true（有此元素）与false（没有此元素)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">l.contains(<span class="string">&quot;Hello,World&quot;</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="二-遍历ArrayList集合"><a href="#二-遍历ArrayList集合" class="headerlink" title="二.遍历ArrayList集合"></a>二.遍历ArrayList集合</h2><p>遍历集合有两种常用方法：</p>
<ul>
<li>Iterator迭代器遍历</li>
<li>foreach遍历<h3 id="Iterator迭代器遍历"><a href="#Iterator迭代器遍历" class="headerlink" title="Iterator迭代器遍历"></a>Iterator迭代器遍历</h3>Iterator有next()与hasNext()两种方法。前者是取出集合下一个元素(Iterator初始指向集合第一个元素的前面)，后者是判断是否有下一个元素。<br>使用集合的iterator()方法获取与当前集合关联的迭代器对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;hexo&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;theme&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;anzhiyu&quot;</span>);</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">i</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="keyword">while</span>(i.hasNext())&#123;</span><br><span class="line">System.out.println(i.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
结果：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo</span><br><span class="line">theme</span><br><span class="line">anzhiyu</span><br></pre></td></tr></table></figure>
<h3 id="foreach遍历"><a href="#foreach遍历" class="headerlink" title="foreach遍历"></a>foreach遍历</h3>使用一个临时变量来取出集合中每一个元素。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;hexo&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;theme&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;anzhiyu&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Object o : list)&#123;</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure>
结果：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo</span><br><span class="line">theme</span><br><span class="line">anzhiyu</span><br></pre></td></tr></table></figure>
这里给出ArrayList的源码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8683452581122892189L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 默认容量大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 空数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 用于保存ArrayList中数据的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ArrayList中所包含元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 带初始容量参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 默认构造函数，其默认初始容量为10</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 带Collection参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        size = elementData.length;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将此 ArrayList 实例的容量调整为列表的当前大小(实际元素个数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所</span></span><br><span class="line">    <span class="comment">// 指定的元素数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minExpand</span> <span class="operator">=</span> (elementData != EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">// any size if real element table</span></span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// larger than default for empty table. It&#x27;s already supposed to be</span></span><br><span class="line">            <span class="comment">// at default size.</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回ArrayList中的元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 判断ArrayList是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 判断ArrayList是否包含Object(o)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回ArrayList中首次出现的指定元素的索引，或如果此列表不包含元素，则返回 -1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回ArrayList中最后一次出现的指定元素的索引，或如果此列表不包含索引，则返回 -1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回此 ArrayList 实例的浅表副本</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class="built_in">super</span>.clone();</span><br><span class="line">            <span class="comment">// 将当前ArrayList的全部元素拷贝到v中</span></span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn&#x27;t happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 按适当顺序（从第一个到最后一个元素）返回包含此列表中所有元素的数组</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回ArrayList的模板数组。所谓模板数组，即可以将T设为任意的数据类型</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a&#x27;s runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 位置访问操作   </span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回ArrayList中指定位置上的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 用指定的元素替代ArrayList中指定位置上的元素，并返回替代前的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">        <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将指定的元素添加到ArrayList的尾部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将指定的元素插入ArrayList中的指定位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"> </span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 移除ArrayList中指定位置上的元素，并返回该位置上的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 移除ArrayList中首次出现的指定元素（如果存在则移除并返回true，否则返回false）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 私有方法，用于快速移除</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 移除ArrayList中的所有元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 按照指定 collection 的迭代器所返回的元素顺序，</span></span><br><span class="line">    <span class="comment">// 将该 collection 中的所有元素添加到ArrayList的尾部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 从指定的位置开始，将指定 collection 中的所有元素插入到ArrayList中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"> </span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"> </span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 移除列表中索引在 fromIndex（包括）和 toIndex（不包括）之间的所有元素</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newSize</span> <span class="operator">=</span> size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 私有方法，用于范围检测</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 私有方法，用于add和addAll</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheckForAdd</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">outOfBoundsMsg</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Index: &quot;</span>+index+<span class="string">&quot;, Size: &quot;</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 移除ArrayList中Collection所包含的所有元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 保留所有ArrayList和Collection共有的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="type">boolean</span> complement)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="literal">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将ArrayList的“容量，所有的元素值”都写入到输出流中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line">    <span class="comment">// 先将ArrayList的“容量”读出，然后将“所有的元素值”读出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"> </span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回一个从指定位置开始遍历的ListIterator迭代器</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span>+index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回一个ListIterator迭代器</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回一个Iterator迭代器</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回一个指定范围的子List列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubList</span>(<span class="built_in">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-声音管理器</title>
    <url>/2023/12/10/Unity%E7%AC%94%E8%AE%B0-%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h1 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h1><p>导入消息框架（详见之前的Unity笔记），新建一个Manager文件夹，用来储存管理器。再创建一个Managers文件夹，是管理器的集合。</p>
<h1 id="声音管理器"><a href="#声音管理器" class="headerlink" title="声音管理器"></a>声音管理器</h1><p>在Managers下创建脚本Managers。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Managers</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//管理器集合</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类管理所有的管理器单例。下面创建一个简单的声音管理器<br>创建一个名为AudioManager的文件夹，里面创建一个名为AudioManager的脚本。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AudioManager</span> : <span class="title">ManagerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//环境音</span></span><br><span class="line">    <span class="keyword">private</span> AudioSource envPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//音效</span></span><br><span class="line">    <span class="keyword">private</span> AudioSource sePlayer;</span><br><span class="line">    <span class="comment">//背景音乐</span></span><br><span class="line">    <span class="keyword">private</span> AudioSource Player;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()<span class="comment">//初始化</span></span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//创建三个播放器</span></span><br><span class="line">        <span class="comment">//背景音乐</span></span><br><span class="line">        Player = gameObject.AddComponent&lt;AudioSource&gt;();</span><br><span class="line">        Player.loop = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//音效</span></span><br><span class="line">        sePlayer = gameObject.AddComponent&lt;AudioSource&gt;();</span><br><span class="line">        <span class="comment">//环境音</span></span><br><span class="line">        envPlayer = gameObject.AddComponent&lt;AudioSource&gt;();</span><br><span class="line">        <span class="comment">//切换场景不销毁</span></span><br><span class="line">        GameObject.DontDestroyOnLoad(<span class="keyword">this</span>.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span> <span class="title">GetMessageType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageType.Type_Audio;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//播放背景音乐 通过文件名播放 或 AudioClip播放</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayMusic</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> volume = <span class="number">1</span></span>)</span>&#123;<span class="comment">//volume:声音大小，默认1</span></span><br><span class="line">    <span class="comment">//通过名称播放,mp3存储在Resoures文件夹下(可能需要自己创建，大小写区分)</span></span><br><span class="line">    AudioClip clip = Resources.Load&lt;AudioClip&gt;(name);</span><br><span class="line">    PlayMusic(clip,volume);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayMusic</span>(<span class="params">AudioClip clip,<span class="built_in">float</span> volume=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//直接传入声音</span></span><br><span class="line">        Player.volume = volume;</span><br><span class="line">        Player.clip = clip;</span><br><span class="line">        <span class="keyword">if</span>(Player.isPlaying)&#123;<span class="comment">//是否在播放,可选，看游戏逻辑</span></span><br><span class="line">        Player.Stop();</span><br><span class="line">        &#125;</span><br><span class="line">        Player.clip = clip;</span><br><span class="line">        Player.Play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopMusic</span>()</span>&#123;</span><br><span class="line">        Player.Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改变音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeMusicVolume</span>(<span class="params"><span class="built_in">float</span> volume</span>)</span>&#123;</span><br><span class="line">        Player.volume = volume;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//播放环境音</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayEnvMusic</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> volume</span>)</span>&#123;</span><br><span class="line">        AudioClip clip =  Resources.Load&lt;AudioClip&gt;(name);</span><br><span class="line">        PlayEnvMusic(clip,volume);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayEnvMusic</span>(<span class="params">AudioClip clip,<span class="built_in">float</span> volume</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(envPlayer.isPlaying)&#123;</span><br><span class="line">            envPlayer.Stop();</span><br><span class="line">        &#125;</span><br><span class="line">        envPlayer.clip = clip;</span><br><span class="line">        envPlayer.volume = volume;</span><br><span class="line">        envPlayer.Play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopEnvMusic</span>()</span>&#123;</span><br><span class="line">        envPlayer.Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//音效</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlaySeSound</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> volume=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        AudioClip clip = Resources.Load&lt;AudioClip&gt;(name);</span><br><span class="line">        PlaySeSound(clip,volume);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlaySeSound</span>(<span class="params">AudioClip clip,<span class="built_in">float</span> volume=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        sePlayer.PlayOneShot(clip,volume);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在某个物体上面播放音效(上面是在管理器上播放)适用于3D</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerSeSoundOnObject</span>(<span class="params"><span class="built_in">string</span> name,GameObject go,<span class="built_in">float</span> volume=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        AudioClip clip = Resources.Load&lt;AudioClip&gt;(name);</span><br><span class="line">        PlayerSeSoundOnObject(clip,go,volume);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerSeSoundOnObject</span>(<span class="params">AudioClip clip,GameObject go,<span class="built_in">float</span> volume=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        AudioSource player = go.GetComponent&lt;AudioSource&gt;();</span><br><span class="line">        <span class="keyword">if</span>(player == <span class="literal">null</span>)&#123;</span><br><span class="line">            player = go.AddComponent&lt;AudioSource&gt;();;</span><br><span class="line">        &#125;</span><br><span class="line">        player.volume = volume;</span><br><span class="line">        player.PlayOneShot(clip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在Managers脚本上编写：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Managers</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//管理器集合</span></span><br><span class="line">    <span class="comment">//声音</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AudioManager m_Audio = AudioManager.Instance.GetComponent&lt;AudioManager&gt;();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-json和xml</title>
    <url>/2024/03/26/Unity%E7%AC%94%E8%AE%B0-json%E5%92%8Cxml/</url>
    <content><![CDATA[<h1 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h1><p>在一个公司里，老板给了员工A一些任务，叫员工A按时去完成这些任务。<br><img src="https://s21.ax1x.com/2024/05/05/pkAI4yR.png" alt="pkAI4yR.png"><br>但这个员工A很<strong>健忘</strong>,经常忘记老板吩咐的任务。<br><img src="https://s21.ax1x.com/2024/05/05/pkAIRW4.png"><br>员工A为了防止这种情况再次发生，想出了一种办法：拿出一个<strong>小本本</strong>在上面<strong>按一定的格式记录下每次老板吩咐的任务。</strong><br><img src="https://s21.ax1x.com/2024/05/05/pkAIfSJ.png"><br>这样，员工A就不会再忘记工作了。<br><img src="https://s21.ax1x.com/2024/05/05/pkAIhl9.png"><br>在员工A记录任务时他所使用的<strong>固定格式</strong>，就叫做————<br><img src="https://s21.ax1x.com/2024/05/08/pkVBmGV.png"></p>
<h2 id="数据格式-为什么需要数据格式"><a href="#数据格式-为什么需要数据格式" class="headerlink" title="数据格式-为什么需要数据格式"></a>数据格式-为什么需要数据格式</h2><p>以前在编写数据时，人们<strong>用空格隔开数据</strong>,以实现数据的分类，一碰上比较复杂的情况时，这种分隔方式就会遇到一种问题：<br><img src="https://s21.ax1x.com/2024/05/05/pkAoPk8.png"><br><strong>这啥啊？</strong><br>由于数据的庞大与复杂，不仅人看不清楚，机器也看不懂这一坨究竟是啥。<br>于是人们开始用<strong>逗号”,”<strong>分隔数据。这种用逗号分隔属性的格式叫做</strong>CSV格式</strong>。<br>office支持csv格式，可以读取xxx.csv。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Name Id price</span><br><span class="line">   hexo   1   0</span><br><span class="line">   github 2  0</span><br></pre></td></tr></table></figure>
<p>一些网游会出现包含逗号的语句数据，于是把分隔的逗号换成**|**这样能避免混淆，且看起来更像表格:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//Name Id price</span><br><span class="line">   hexo  | 1 | 0</span><br><span class="line">  github| 2 | 0</span><br></pre></td></tr></table></figure>
<p>但这样依旧不够清晰，而且也不够统一，于是就出现了两种常用的格式：<strong>XML</strong>和<strong>Json</strong><br>玩游戏的观众想必知道：在游戏文件夹里，常常出现后缀是json和xml的文件，这些文件储存了游戏中<strong>需要存储的数据</strong>，方便下次使用。<br>游戏中需要储存的数据有背包物品，角色血量，关卡进度，怪物生成等，其中Json大多数存储的是游戏配置的数据（如怪物生成，Npc数据，游戏进度，背包内容），而XML可储存物品或玩家的数据（如角色面板，物品信息，大世界数据，怪物面板）我们先来看Json是什么样的：</p>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>json是一种常用的数据格式，<strong>是数组+字典的嵌套</strong><br>这是一个简单的json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;persons&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span>      </span><br><span class="line">			<span class="punctuation">&#123;</span>				</span><br><span class="line">			          			</span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;project&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;sekai&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们来分析一下这段代码：<br>第一行有一个<strong>括号</strong>这是一个<strong>字典</strong>，所有数据都储存在这个字典中。<br>第二行是字典中的一个<strong>键值对</strong>，键是persons，值是一个包含字典的数组，也就是<strong>一个字典类型的数组</strong>。<br>第三行是一个括号，这是数组里的第一个字典。<br>之后写了三个键值对，表示这个字典里有三个元素，第二个字典同理。这就是这串json表达的信息。<br>可以看出，这个Json将这个类的数据通过<strong>字典+数组</strong>的格式存储在文件里，机器一看到后缀是json，就会想到<strong>哦！这是json数据格式！</strong>，便会用json”字典+数组”的格式来读取数据。</p>
<p>在csharp（c#）里，<strong>json数组映射成c#数组，json字典映射为c#对象</strong></p>
<h3 id="Json-存储数据"><a href="#Json-存储数据" class="headerlink" title="Json-存储数据"></a>Json-存储数据</h3><p>在知道了Json的相关基础后，<strong>我们该如何去存储和读取json呢？</strong><br>对于json的读写操作，unity提供了一个十分方便的工具：<strong>JsonUtility</strong>,它在unity项目的工程包里，不需要任何插件来使用。<br>在上面的例子中，员工A记录任务时需要一支笔来记录。JsonUtility里也有担任这项任务的工具：ToJson。<br>ToJson返回的是一个json格式的字符串，<strong>它会将传入的对象转化成json</strong>（<strong>注意，现在只是拿到了json格式的数据，并没有写入！</strong>）<br>打开一个unity项目，在Assets下创建脚本JsonUtilityTest。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>&#123; <span class="comment">// 需要记录的类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name; <span class="comment">//需要记录的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonUtilityTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用JsonUtility创建Json</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(); <span class="comment">//创建json类的实例</span></span><br><span class="line">        person.name = <span class="string">&quot;hexo&quot;</span>; <span class="comment">//给数据赋值</span></span><br><span class="line">        person.id = <span class="number">1</span>;</span><br><span class="line">        person.price = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//转为json</span></span><br><span class="line">        <span class="built_in">string</span> jsonStr = JsonUtility.ToJson(person);<span class="comment">//ToJson:将对象转为json格式的字符串 相当于上面例子里的笔 ToJson接受一个对象，它会将这个对象转成json字符串</span></span><br><span class="line">        Debug.Log(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大家可能会注意到，在声明记录的类的上面，有一个[Serializable]标签，<strong>该标签表示这个类/字段/方法是可序列化的</strong>在本例中，<strong>它向unity表明类Person可以序列化为json</strong>,如果没有，unity可能无法将数据保存。<br>现在我们只是获取了一个json字符串，并没有将数据保存，我们可以这样做：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line">......</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用JsonUtility创建Json</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(); <span class="comment">//创建json类的实例</span></span><br><span class="line">        person.name = <span class="string">&quot;hexo&quot;</span>; <span class="comment">//给数据赋值</span></span><br><span class="line">        person.id = <span class="number">1</span>;</span><br><span class="line">        person.price = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//转为json</span></span><br><span class="line">        <span class="built_in">string</span> jsonStr = JsonUtility.ToJson(person);<span class="comment">//ToJson:将对象转为json格式的字符串 相当于上面例子里的笔 ToJson接受一个对象，它会将这个对象转成json字符串</span></span><br><span class="line">        File.WriteAllText(Application.streamingAssetsPath + <span class="string">&quot;/JsonTest.json&quot;</span>, jsonStr);<span class="comment">//写入文件操作</span></span><br><span class="line">        Debug.Log(jsonStr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在Assets文件夹下创建StreamingAssets文件夹，之后运行脚本，几秒后，会发现刚刚创建的文件夹下有一个JsonTest.json文件，里面包含着一个刚生成的字符串。<br>现在我们已经学会了如何用JsonUtility存储数据<br>例如：这是一个跑酷游戏，现在想将玩家进度存档：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line">[<span class="meta">Serialzable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> health;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> score;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> item;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> dis <span class="comment">//玩家跑出去的距离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line"><span class="comment">//创建Json</span></span><br><span class="line">PlayerState player = <span class="keyword">new</span> PlayerState();</span><br><span class="line">player.health = 玩家目前生命值</span><br><span class="line">player.score = 玩家目前分数</span><br><span class="line">player.item = 玩家目前拾取物</span><br><span class="line">player.dis = 玩家目前跑出去的距离</span><br><span class="line"><span class="built_in">string</span> str = JsonUtility.ToJson(player);</span><br><span class="line">Debug.Log(str);</span><br></pre></td></tr></table></figure>
<p>###FromJson(读档)<br>FromJson可以将Json字符串转化为对象。<br>格式：v = JsonUtility.FromJson&lt;要转化的对象类型(v的类型)&gt;(v);<br><strong>注意：进行Json转化对象，对象必须可序列化([Serialzable])</strong><br>按照上面的跑酷例子，写出以下代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">PlayerState players = JsonUtility.FromJson&lt;PlayerState&gt;(str);</span><br><span class="line">Debug.Log(players.name);</span><br></pre></td></tr></table></figure>
<p>如果控制台输出角色名字，则说明代码正确</p>
<h3 id="第三方Json工具"><a href="#第三方Json工具" class="headerlink" title="第三方Json工具"></a>第三方Json工具</h3><p>进入<a href="https://link.jianshu.com/?t=https://github.com/lbv/litjson/releases/download/v0.9.0/LitJson.dll">第三方工具dll文件下载</a>然后在你unity项目的根目录（Assets)新建Plugins文件夹，把dll文件拖进去。<br>拖进去后会显示一个拼图图标。<br><img src="https://www.freeimg.cn/i/2024/03/23/65fe7f862002d.png" alt="LitJson.png"></p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul>
<li>LitJson在创建类时不需要加上**[Serializable]标签**</li>
<li>LitJson有<strong>两种解析和创建Json的方式</strong><h5 id="创建与解析-一"><a href="#创建与解析-一" class="headerlink" title="创建与解析 一"></a>创建与解析 一</h5><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6>创建要用到LitJson里的<strong>JsonMapper类</strong>里的ToJson方法：<br>创建LitJsons脚本(注意脚本不要和<strong>LitJson重名</strong>，在里面导入命名空间：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> LitJson;</span><br></pre></td></tr></table></figure>
然后编写代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        fun1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun1</span>()</span>&#123;</span><br><span class="line">        JsonTest jsontest1 = <span class="keyword">new</span> JsonTest();</span><br><span class="line">            jsontest1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">            jsontest1.age = <span class="number">11</span>;</span><br><span class="line">        JsonTest jsontest2 = <span class="keyword">new</span> JsonTest();</span><br><span class="line">            jsontest2.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">            jsontest2.age = <span class="number">10</span>;</span><br><span class="line">        JsonList jsonlist = <span class="keyword">new</span> JsonList();</span><br><span class="line">        jsonlist.jsonlist = <span class="keyword">new</span> JsonTest[]&#123;jsontest1,jsontest2&#125;;</span><br><span class="line">        <span class="built_in">string</span> jsonstr = JsonMapper.ToJson(jsonlist);</span><br><span class="line">        Debug.Log(jsonstr);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
创建空对象LitJson，将脚本挂载到对象上，运行，显示<br>{“jsonlist”:[{“name”:”\u5C0F\u660E”,”age”:11},{“name”:”\u5C0F\u7EA2”,”age”:10}]}<br>Json字符串的一些位置出现了一些乱码，<strong>这是因为LitJson将中文转成了Unicode编码</strong>。但这样的Json仍然可以直接使用，不影响效果。如果想知道这些Unicode究竟是什么，可以试着搜索网站，将Unicode转成中文。<h6 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h6>解析使用JsonMapper里的<strong>ToObject方法</strong>:<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span>()</span>&#123;</span><br><span class="line">        JsonTest jsontest1 = <span class="keyword">new</span> JsonTest();</span><br><span class="line">            jsontest1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">            jsontest1.age = <span class="number">11</span>;</span><br><span class="line">        JsonTest jsontest2 = <span class="keyword">new</span> JsonTest();</span><br><span class="line">            jsontest2.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">            jsontest2.age = <span class="number">10</span>;</span><br><span class="line">        JsonList jsonlist = <span class="keyword">new</span> JsonList();</span><br><span class="line">        jsonlist.jsonlist = <span class="keyword">new</span> JsonTest[]&#123;jsontest1,jsontest2&#125;;</span><br><span class="line">        <span class="built_in">string</span> jsonstr = JsonMapper.ToJson(jsonlist);</span><br><span class="line">        Debug.Log(jsonstr);</span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        JsonList listobject = JsonMapper.ToObject&lt;JsonList&gt;(jsonstr);</span><br><span class="line">        Debug.Log(listobject.jsonlist[<span class="number">0</span>].name);<span class="comment">//小明</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
这次，控制台打印出了”小明”二字，再次说明<strong>Unicode编码不影响实际效果</strong><h5 id="创建与解析-二"><a href="#创建与解析-二" class="headerlink" title="创建与解析 二"></a>创建与解析 二</h5>这种Json创建方法不再依靠指定的类，而是使用一个<strong>JsonData</strong>类表示Json中各种类型<h6 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">fun2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span>()</span>&#123;</span><br><span class="line">            JsonData jd1 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd1.SetJsonType(JsonType.Object);<span class="comment">//一般常用的是JsonType.Array(数组，Json中的中括号)和JsonType.Object(字典，Json中的大括号)</span></span><br><span class="line">            <span class="comment">//上句话不写也行，JsonData可以自动解析当前类型</span></span><br><span class="line">            jd1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小明&quot;</span>;<span class="comment">//JsonData自动推断类型，只要写属性名和属性值</span></span><br><span class="line">            jd1[<span class="string">&quot;age&quot;</span>] = <span class="number">11</span>;</span><br><span class="line">                Debug.Log(jd1.ToJson());<span class="comment">//直接用ToJson转化成Json</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
最后控制台打印<br>{“name”:”\u5C0F\u660E”,”age”:11}<br>这样，我们可以实现刚才的样例：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span>()</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">fun2</span>()</span>&#123;</span><br><span class="line">            JsonData jd1 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd1.SetJsonType(JsonType.Object);<span class="comment">//一般常用的是JsonType.Array(数组，Json中的中括号)和JsonType.Object(字典，Json中的大括号)</span></span><br><span class="line">            <span class="comment">//上句话不写也行，JsonData可以自动解析当前类型</span></span><br><span class="line">            jd1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小明&quot;</span>;<span class="comment">//JsonData自动推断类型，只要写属性名和属性值</span></span><br><span class="line">            jd1[<span class="string">&quot;age&quot;</span>] = <span class="number">11</span>;</span><br><span class="line">            <span class="comment">//Debug.Log(jd1.ToJson());直接用ToJson转化成Json</span></span><br><span class="line">            JsonData jd2 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd2.SetJsonType(JsonType.Object);</span><br><span class="line">            jd2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">            jd2[<span class="string">&quot;age&quot;</span>] = <span class="number">10</span>;</span><br><span class="line">            JsonData jds = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jds.SetJsonType(JsonType.Array);<span class="comment">//储存两个对象，使用Array类型</span></span><br><span class="line">            jds.Add(jd1);<span class="comment">//添加数组元素</span></span><br><span class="line">            jds.Add(jd2);</span><br><span class="line">            JsonData jd3 = <span class="keyword">new</span> JsonData();<span class="comment">//最外层的大括号</span></span><br><span class="line">            jd3.SetJsonType(JsonType.Object);</span><br><span class="line">            jd3[<span class="string">&quot;List&quot;</span>] = jds;</span><br><span class="line">            Debug.Log(jd3.ToJson());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
控制台显示<br>{“List”:[{“name”:”\u5C0F\u660E”,”age”:11},{“name”:”\u5C0F\u7EA2”,”age”:10}]}<h6 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h6>读取的方式是先创建Json字符串，然后解析成JsonData类，获取最外层的大括号，然后遍历获取属性<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span>()</span>&#123;</span><br><span class="line">            JsonData jd1 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd1.SetJsonType(JsonType.Object);<span class="comment">//一般常用的是JsonType.Array(数组，Json中的中括号)和JsonType.Object(字典，Json中的大括号)</span></span><br><span class="line">            <span class="comment">//上句话不写也行，JsonData可以自动解析当前类型</span></span><br><span class="line">            jd1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小明&quot;</span>;<span class="comment">//JsonData自动推断类型，只要写属性名和属性值</span></span><br><span class="line">            jd1[<span class="string">&quot;age&quot;</span>] = <span class="number">11</span>;</span><br><span class="line">            <span class="comment">//Debug.Log(jd1.ToJson());直接用ToJson转化成Json</span></span><br><span class="line">            JsonData jd2 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd2.SetJsonType(JsonType.Object);</span><br><span class="line">            jd2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">            jd2[<span class="string">&quot;age&quot;</span>] = <span class="number">10</span>;</span><br><span class="line">            JsonData jds = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jds.SetJsonType(JsonType.Array);<span class="comment">//储存两个对象，使用Array类型</span></span><br><span class="line">            jds.Add(jd1);<span class="comment">//添加数组元素</span></span><br><span class="line">            jds.Add(jd2);</span><br><span class="line">            JsonData jd3 = <span class="keyword">new</span> JsonData();<span class="comment">//最外层的大括号</span></span><br><span class="line">            jd3.SetJsonType(JsonType.Object);</span><br><span class="line">            jd3[<span class="string">&quot;List&quot;</span>] = jds;</span><br><span class="line">            Debug.Log(jd3.ToJson());</span><br><span class="line">            <span class="comment">//解析</span></span><br><span class="line">            <span class="built_in">string</span> jsonstr = jd3.ToJson();<span class="comment">//提取Json字符串</span></span><br><span class="line">            JsonData jsons3D = JsonMapper.ToObject(jsonstr);<span class="comment">//解析不需要限制泛型，因为类型都是JsonData</span></span><br><span class="line">            JsonData jd4 = jsons3D[<span class="string">&quot;List&quot;</span>];<span class="comment">//最外层的大括号</span></span><br><span class="line">            <span class="keyword">foreach</span>(JsonData js <span class="keyword">in</span> jd4)&#123;</span><br><span class="line">                Debug.Log(js[<span class="string">&quot;name&quot;</span>].ToString()+ <span class="string">&quot; &quot;</span>+(<span class="built_in">int</span>)js[<span class="string">&quot;age&quot;</span>]);<span class="comment">//里面的属性都是JsonData类型，所以需要转型</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
控制台输出：<br>小明 11<br>小红 10<br>完整代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonList</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> JsonTest[] jsonlist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LitJsons</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        fun1();</span><br><span class="line">        fun2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun1</span>()</span>&#123;</span><br><span class="line">        JsonTest jsontest1 = <span class="keyword">new</span> JsonTest();</span><br><span class="line">            jsontest1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">            jsontest1.age = <span class="number">11</span>;</span><br><span class="line">        JsonTest jsontest2 = <span class="keyword">new</span> JsonTest();</span><br><span class="line">            jsontest2.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">            jsontest2.age = <span class="number">10</span>;</span><br><span class="line">        JsonList jsonlist = <span class="keyword">new</span> JsonList();</span><br><span class="line">        jsonlist.jsonlist = <span class="keyword">new</span> JsonTest[]&#123;jsontest1,jsontest2&#125;;</span><br><span class="line">        <span class="built_in">string</span> jsonstr = JsonMapper.ToJson(jsonlist);</span><br><span class="line">        Debug.Log(jsonstr);</span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        JsonList listobject = JsonMapper.ToObject&lt;JsonList&gt;(jsonstr);</span><br><span class="line">        Debug.Log(listobject.jsonlist[<span class="number">0</span>].name);<span class="comment">//小明</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">fun2</span>()</span>&#123;</span><br><span class="line">            JsonData jd1 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd1.SetJsonType(JsonType.Object);<span class="comment">//一般常用的是JsonType.Array(数组，Json中的中括号)和JsonType.Object(字典，Json中的大括号)</span></span><br><span class="line">            <span class="comment">//上句话不写也行，JsonData可以自动解析当前类型</span></span><br><span class="line">            jd1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小明&quot;</span>;<span class="comment">//JsonData自动推断类型，只要写属性名和属性值</span></span><br><span class="line">            jd1[<span class="string">&quot;age&quot;</span>] = <span class="number">11</span>;</span><br><span class="line">            <span class="comment">//Debug.Log(jd1.ToJson());直接用ToJson转化成Json</span></span><br><span class="line">            JsonData jd2 = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jd2.SetJsonType(JsonType.Object);</span><br><span class="line">            jd2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">            jd2[<span class="string">&quot;age&quot;</span>] = <span class="number">10</span>;</span><br><span class="line">            JsonData jds = <span class="keyword">new</span> JsonData();</span><br><span class="line">            jds.SetJsonType(JsonType.Array);<span class="comment">//储存两个对象，使用Array类型</span></span><br><span class="line">            jds.Add(jd1);<span class="comment">//添加数组元素</span></span><br><span class="line">            jds.Add(jd2);</span><br><span class="line">            JsonData jd3 = <span class="keyword">new</span> JsonData();<span class="comment">//最外层的大括号</span></span><br><span class="line">            jd3.SetJsonType(JsonType.Object);</span><br><span class="line">            jd3[<span class="string">&quot;List&quot;</span>] = jds;</span><br><span class="line">            Debug.Log(jd3.ToJson());</span><br><span class="line">            <span class="comment">//解析</span></span><br><span class="line">            <span class="built_in">string</span> jsonstr = jd3.ToJson();<span class="comment">//提取Json字符串</span></span><br><span class="line">            JsonData jsons3D = JsonMapper.ToObject(jsonstr);<span class="comment">//解析不需要限制泛型，因为类型都是JsonData</span></span><br><span class="line">            JsonData jd4 = jsons3D[<span class="string">&quot;List&quot;</span>];<span class="comment">//最外层的大括号</span></span><br><span class="line">            <span class="keyword">foreach</span>(JsonData js <span class="keyword">in</span> jd4)&#123;</span><br><span class="line">                Debug.Log(js[<span class="string">&quot;name&quot;</span>].ToString()+ <span class="string">&quot; &quot;</span>+(<span class="built_in">int</span>)js[<span class="string">&quot;age&quot;</span>]);<span class="comment">//里面的属性都是JsonData类型，所以需要转型</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
##XML<br>XML的格式和HTML很像，有一个节点（如<name>)和一个与之对应的节点(如</name>)，如下：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>&quot;小明&quot;<span class="tag">&lt;/<span class="name">name</span>&gt;</span> //节点名称 name 节点值 &quot;小明&quot;</span><br></pre></td></tr></table></figure>
一对节点里还可以包含其他节点，如下：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;小明&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span> //正确格式</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>&quot;小&quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;明&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span>//错误格式</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>节点只能包含节点或值，不能两者同时包含</strong><br>有时候节点不够用，于是XML还有属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>&quot;小红&quot;<span class="tag">&lt;/<span class="name">name</span>&gt;</span>//name后面的id就是节点的属性，**属性必须以键值对格式出现，并且属性值必须加上双引号&quot;&quot;**，一个节点可以有多个属性</span><br></pre></td></tr></table></figure>
<p>如果遇到只有属性值没有节点值的时候，可以简写，格式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//未简写的格式：</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">//简写后：</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Assets文件夹下创建一个新的xml文档，命名为test.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><span class="comment">&lt;!--声明文档类型和版本，编码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一个节点叫做根节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="comment">&lt;!--root为根节点，根节点只能有一个，不允许根节点外还有其他节点--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>&quot;北京的春节&quot;<span class="tag">&lt;<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="comment">&lt;!--同一层级下，节点名字可以重复--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>&quot;腊八粥&quot;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>&quot;藏戏&quot;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">books</span>&gt;</span><span class="comment">&lt;!--根节点root下的books节点包含三个story节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h3><p>创建XMLTest脚本，添加命名空间：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Xml;<span class="comment">//引用XML命名空间</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Xml;<span class="comment">//引用XML命名空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XMLTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//解析XML</span></span><br><span class="line">        ParseXML();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ParseXML</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//解析XML-1</span></span><br><span class="line">        <span class="comment">//XML文档类</span></span><br><span class="line">        XmlDocument doc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">        <span class="comment">//读取XML文件</span></span><br><span class="line">        doc.Load(Application.dataPath + <span class="string">&quot;/XML/test.xml&quot;</span>);<span class="comment">//读取XML文件 dataPath:游戏数据文件夹（Assets)</span></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        XmlElement rootEle = doc.LastChild <span class="keyword">as</span> XmlElement;</span><br><span class="line"><span class="comment">//XmlElement类是XML元素类，用他获取XML最后一个节点（LastChild是获取XML最后一个节点，也就是根节点)再转成它的父类（LastChild返回值是XMLNode，是XmlElement的父类，子类通常比父类拥有更多属性，所以直接转成XmlElement类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//books节点</span></span><br><span class="line">        XmlElement booksEle = rootEle.FirstChild <span class="keyword">as</span> XmlElement;</span><br><span class="line">        <span class="comment">//通过FirstChild获取root下的第一个节点（其实LastChild也行），也就是books节点</span></span><br><span class="line">        <span class="comment">//遍历story节点</span></span><br><span class="line">        <span class="keyword">foreach</span>(XmlElement storyEle <span class="keyword">in</span> booksEle.ChildNodes)&#123;<span class="comment">//ChildNodes:该节点下的所有节点</span></span><br><span class="line">        <span class="comment">//获取id</span></span><br><span class="line">            <span class="built_in">string</span> id = storyEle.GetAttribute(<span class="string">&quot;id&quot;</span>);<span class="comment">//GetAttribute:获取指定属性（id）</span></span><br><span class="line">            <span class="built_in">string</span> name = storyEle.ChildNodes[<span class="number">0</span>].InnerText;<span class="comment">//节点下的第一个节点，也可以用FirstChild InnerText:节点的值</span></span><br><span class="line">            Debug.Log(name + <span class="string">&quot; &quot;</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在进行如上操作时，注意XML文件必须没有注释！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意！在解析时，不要在XML文件里添加任何注释或其他类型的东西！比如：注释类型为System.Xml.Comment，在转化成XmlElement时，FirstChild检测到的是注释！所以会报NullReferenceException，而在遍历节点时也会NullReferenceException，所以尽量不要使用注释！</strong><br>必要时，可以采用如下方案：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="built_in">object</span> storyEle <span class="keyword">in</span> booksEle.ChildNotes)&#123;</span><br><span class="line">    <span class="keyword">if</span>(stroyEle == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行获取操作...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印XML结果：<br><img src="https://www.freeimg.cn/i/2024/03/24/65ffa04348531.png" alt="XML"></p>
<h3 id="XML解析·二"><a href="#XML解析·二" class="headerlink" title="XML解析·二"></a>XML解析·二</h3><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><p>XPath是一种<strong>路径语法</strong>,拿test.xml举例，XPath语法下的test.xml路径如下：<br><strong>root/books/story/name</strong><br>第二种方法依靠的就是XPath语法，内容如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParseXML2</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//创建xml文档类</span></span><br><span class="line">        XmlDocument doc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">        doc.Load(Application.dataPath + <span class="string">&quot;/XML/test.xml&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        XPath:</span></span><br><span class="line"><span class="comment">        路径语法：</span></span><br><span class="line"><span class="comment">        例如：</span></span><br><span class="line"><span class="comment">        /root/books/story/name</span></span><br><span class="line"><span class="comment">        相对路径： //name 直接存放name节点</span></span><br><span class="line"><span class="comment">        结合：</span></span><br><span class="line"><span class="comment">        //books/story/name 通过相对路径找到books，再通过绝对路径找到name</span></span><br><span class="line"><span class="comment">         寻找单个节点：</span></span><br><span class="line"><span class="comment">        //booke/story[2]/name 找到第二个story节点下的name</span></span><br><span class="line"><span class="comment">        //books/story[last()-1]/name 找到倒数第二个story节点下的name</span></span><br><span class="line"><span class="comment">        //books/story[position()&lt;3]/name 获取前两个story节点下的name</span></span><br><span class="line"><span class="comment">        寻找拥有指定属性的节点：</span></span><br><span class="line"><span class="comment">        //books/story[@id]/name 只获取有id属性的story节点下的name</span></span><br><span class="line"><span class="comment">        寻找拥有指定id值的节点：</span></span><br><span class="line"><span class="comment">        //books/story[@id=2]/name 只获取有id属性且id值为2的story节点下的name</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        XmlNodeList list = doc.SelectNodes(<span class="string">&quot;/root/books/story/name&quot;</span>);</span><br><span class="line">        <span class="comment">//XmlNodeList list = doc.SelectNodes(&quot;//name&quot;);</span></span><br><span class="line">        <span class="comment">//doc.SelectNodes返回符合XPath路径的所有节点，存放在list列表里</span></span><br><span class="line">        <span class="keyword">foreach</span>(XmlElement ele <span class="keyword">in</span> list)&#123;<span class="comment">//遍历列表</span></span><br><span class="line">            Debug.Log(ele.InnerText);<span class="comment">//返回节点值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<pre><code>运行结果：
![XPath](https://www.freeimg.cn/i/2024/03/24/65ffa32e88fc2.png)
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    XPath:</span></span><br><span class="line"><span class="comment">    路径语法：</span></span><br><span class="line"><span class="comment">    例如：</span></span><br><span class="line"><span class="comment">    /root/books/story/name</span></span><br><span class="line"><span class="comment">    相对路径： //name 直接存放name节点</span></span><br><span class="line"><span class="comment">    结合：</span></span><br><span class="line"><span class="comment">    //books/story/name 通过相对路径找到books，再通过绝对路径找到name</span></span><br><span class="line"><span class="comment">     寻找单个节点：</span></span><br><span class="line"><span class="comment">    //booke/story[2]/name 找到第二个story节点下的name</span></span><br><span class="line"><span class="comment">    //books/story[last()-1]/name 找到倒数第二个story节点下的name</span></span><br><span class="line"><span class="comment">    //books/story[position()&lt;3]/name 获取前两个story节点下的name</span></span><br><span class="line"><span class="comment">    寻找拥有指定属性的节点：</span></span><br><span class="line"><span class="comment">    //books/story[@id]/name 只获取有id属性的story节点下的name</span></span><br><span class="line"><span class="comment">    寻找拥有指定id值的节点：</span></span><br><span class="line"><span class="comment">    //books/story[@id=2]/name 只获取有id属性且id值为2的story节点下的name</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>
    ### xml创建
    <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CreateXML</span>()</span>&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建XML</span></span><br><span class="line">    <span class="comment">//创建文档类</span></span><br><span class="line">    XmlDocument doc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">    <span class="comment">//创建文档声明</span></span><br><span class="line">    XmlDeclaration dec = doc.CreateXmlDeclaration(<span class="string">&quot;1.0&quot;</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//文档声明类 XmlDeclaration 用文档类的CreateXmlDeclaration方法创建文档声明</span></span><br><span class="line">    doc.AppendChild(dec);<span class="comment">//把文档声明添加到文档里</span></span><br><span class="line">    <span class="comment">//root节点</span></span><br><span class="line">    XmlElement rootEle = doc.CreateElement(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//用文档类的CreateElement方法创建root元素</span></span><br><span class="line">    doc.AppendChild(rootEle);<span class="comment">//把root添加到文档里</span></span><br><span class="line">    <span class="comment">//books节点</span></span><br><span class="line">    XmlElement booksEle = doc.CreateElement(<span class="string">&quot;books&quot;</span>);</span><br><span class="line">    rootEle.AppendChild(booksEle);<span class="comment">//把books节点添加到root节点里</span></span><br><span class="line">    <span class="comment">//循环数据(name)</span></span><br><span class="line">    <span class="built_in">string</span>[] names = <span class="keyword">new</span> <span class="built_in">string</span>[]&#123;<span class="string">&quot;北京的春节&quot;</span>,<span class="string">&quot;腊八粥&quot;</span>,<span class="string">&quot;藏戏&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//循环创建节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        XmlElement storyele = doc.CreateElement(<span class="string">&quot;story&quot;</span>);</span><br><span class="line">        booksEle.AppendChild(storyele);</span><br><span class="line">        <span class="comment">//name节点</span></span><br><span class="line">        XmlElement nameEle = doc.CreateElement(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameEle.InnerText = names[i];<span class="comment">//赋值</span></span><br><span class="line">        storyele.AppendChild(nameEle);</span><br><span class="line">        <span class="comment">//添加属性</span></span><br><span class="line">        storyele.SetAttribute(<span class="string">&quot;id&quot;</span>,i+ <span class="string">&quot;&quot;</span>);<span class="comment">//添加属性，属性名：id，值：i 属性值必须是字符串</span></span><br><span class="line">        <span class="comment">/*创建属性方法2：</span></span><br><span class="line"><span class="comment">        XmlAttribute att = doc.CreateAttribute(&quot;id&quot;);//创建id属性</span></span><br><span class="line"><span class="comment">        att.value = i + &quot;&quot;;//属性值为i,属性值必须是字符串</span></span><br><span class="line"><span class="comment">        storyEle.Attrbutes.Append(att);//添加属性至story</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//保存xml文件</span></span><br><span class="line">    doc.Save(Application.dataPath + <span class="string">&quot;/XML/test2.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
保存后运行，几秒后Assets下的XML文件夹会出现test2.xml文件，文件内容如下：
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">story</span> <span class="attr">id</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>北京的春节<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">story</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>腊八粥<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">story</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>藏戏<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
</code></pre>
<p><img src="https://www.freeimg.cn/i/2024/03/24/65ffac460ac1f.png" alt="XML保存"><br>生成的与编写的XML文件<strong>大致一样</strong></p>
<h4 id="拓展·RSS"><a href="#拓展·RSS" class="headerlink" title="拓展·RSS"></a>拓展·RSS</h4><p>RSS:<strong>简易信息聚合</strong>（也叫聚合内容）是一种<strong>基于XML的标准</strong>，<strong>在互联网上被广泛采用的内容包装和投递协议</strong>。RSS(Really Simple Syndication)是一种描述和同步网站内容的格式，是使用最<strong>广泛</strong>的XML应用。RSS<strong>搭建了信息迅速传播的一个技术平台</strong>，使得每个人都成为潜在的信息提供者。<strong>发布一个RSS文件后，这个RSS Feed中包含的信息就能直接被其他站点调用</strong>，而且由于这些数据都是标准的XML格式，所以也能在其他的终端和服务中使用，是一种描述和同步网站内容的格式。 [1]RSS可以是以下三个解释的其中一个： Really Simple Syndication；RDF (Resource Description Framework) Site Summary； Rich Site Summary。但其实这三个解释都是指同一种Syndication的技术。<br>RSS<strong>广泛用于网上新闻频道，blog和wiki，主要的版本有0.91, 1.0, 2.0。使用RSS订阅能更快地获取信息，网站提供RSS输出，有利于让用户获取网站内容的最新更新。网络用户可以在客户端借助于支持RSS的聚合工具软件，在不打开网站内容页面的情况下阅读支持RSS输出的网站内容</strong>。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-UI框架</title>
    <url>/2023/12/08/Unity%E7%AC%94%E8%AE%B0-UI%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><img src="https://z1.ax1x.com/2023/12/08/pi2Q1v6.png" alt="pi2Q1v6.png"><br>这是一个普通的消息框架<br>其中，UIManager与其他分支不同。如NPCManager和Enemy只有一些功能，而UI在制作游戏时通常会有十几个功能（如血条，技能，背包，页面等）。且页面之间要相互切换。<br>所以，UI框架诞生了。</p>
<h1 id="UI框架1"><a href="#UI框架1" class="headerlink" title="UI框架1"></a>UI框架1</h1><p>嵌套在消息框架里，为UIManager做简化。<br>UI框架可以让各个页面互相切换，简洁条理。<br>UI框架将每个页面（UI）制作成预设体（prefab），UIManager负责实例化页面。这是其中一种UI框架的实现。<br>步骤：创建Canvas画布，在里面创建UI页面。UI页面上可以有很多UI子物体。然后将UI页面（不包括Canvas）<br>拖到Project里（显示项目文件夹的地方），然后，用UIManager类在必要的时候实例化预制体。</p>
<ul>
<li>制作UI管理器基类</li>
<li>创建UI页面列表（集合），存储每个预制体</li>
<li>定义一个带参数的方法，用于在必要条件时实例化某个UI页面预制体<br>这个过程很简单，用unity Resources，这里不多赘述。<h1 id="UI框架2"><a href="#UI框架2" class="headerlink" title="UI框架2"></a>UI框架2</h1>第二种方式：<br>将所有UI界面存储在Canvas下面（成为Canvas子物体），都取消显示（激活），不制作成预设体。<br>UIManager此时管理页面的激活，而不是实例化。<br>一个管理器下面有很多UI页面，每个页面下还有很多控件（Image，Text…）<br>所以，我们将这些分为三层。（UI管理器，UI页面，UI控件）<br>我们抽象出3个类：</li>
<li>UIManager UI管理器</li>
<li>UIController UI页面控制器基类</li>
<li>UIControl UI控件<h2 id="UIManager"><a href="#UIManager" class="headerlink" title="UIManager"></a>UIManager</h2>先导入消息框架（详见Unity笔记-消息框架）新建Base文件夹。把消息框架四个基类放入新建的Base文件夹。<br>新建一个UI文件夹，在里面创建UIManager，UIController，UIControl脚本。<br>先写UIManager<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> JetBrains.Annotations;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span> : <span class="title">ManagerBase</span><span class="comment">//继承管理基类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>,UIController&gt; UIControllerDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,UIController&gt;();<span class="comment">//UI页面字典</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetActive</span>(<span class="params"><span class="built_in">string</span> controllerName,<span class="built_in">bool</span> active</span>)</span>&#123;</span><br><span class="line">        transform.Find(controllerName).gameObject.SetActive(active);</span><br><span class="line">        <span class="comment">//激活UI页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面上的子控件</span></span><br><span class="line">    <span class="comment">//获取某个页面的某个控件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UIControl <span class="title">GetUIControl</span>(<span class="params"><span class="built_in">string</span> controllerName,<span class="built_in">string</span> controlName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(UIControllerDic.ContainsKey(controllerName))&#123;<span class="comment">//如果字典里包含此页面</span></span><br><span class="line">    <span class="comment">//寻找页面子控件</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span> <span class="title">GetMessageType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageType.Type_UI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
停！<br>先不管报错，去修改UIController类。<br>UIController<br>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="comment">//控件字典</span></span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>,UIControl&gt; UIControlDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, UIControl&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后回头修改UIManager类<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> JetBrains.Annotations;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span>: <span class="title">ManagerBase</span><span class="comment">//继承管理基类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>,UIController&gt; UIControllerDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,UIController&gt;();<span class="comment">//UI页面字典</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetActive</span>(<span class="params"><span class="built_in">string</span> controllerName,<span class="built_in">bool</span> active</span>)</span>&#123;</span><br><span class="line">        transform.Find(controllerName).gameObject.SetActive(active);</span><br><span class="line">        <span class="comment">//激活UI页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面上的子控件</span></span><br><span class="line">    <span class="comment">//获取某个页面的某个控件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UIControl <span class="title">GetUIControl</span>(<span class="params"><span class="built_in">string</span> controllerName,<span class="built_in">string</span> controlName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(UIControllerDic.ContainsKey(controllerName))&#123;<span class="comment">//如果字典里包含此页面</span></span><br><span class="line">    <span class="comment">//寻找页面子控件</span></span><br><span class="line">    <span class="comment">//当前参数对应的页面里面的控件字典里是否包含参数对应控件</span></span><br><span class="line">        <span class="keyword">if</span>(UIControllerDic[controllerName].UIControlDic.ContainsKey(controlName))&#123;</span><br><span class="line">            <span class="keyword">return</span> UIControllerDic[controllerName].UIControlDic[controlName];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span> <span class="title">GetMessageType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageType.Type_UI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
完成UIManager<h2 id="UIController"><a href="#UIController" class="headerlink" title="UIController"></a>UIController</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="comment">//控件字典</span></span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>,UIControl&gt; UIControlDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, UIControl&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将当前的页面控制器添加到Manager中</span></span><br><span class="line">        UIManager.Instance.GetComponent&lt;UIManager&gt;().UIControllerDic.Add(transform.name,<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//给子控件添加UIControl</span></span><br><span class="line">        <span class="keyword">foreach</span>(Transform tran <span class="keyword">in</span> transform)&#123;<span class="comment">//遍历自身和子物体</span></span><br><span class="line">            <span class="keyword">if</span>(tran.gameObject.GetComponent&lt;UIControl&gt;() == <span class="literal">null</span>)&#123;</span><br><span class="line">                tran.gameObject.AddComponent&lt;UIControl&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UIControl"><a href="#UIControl" class="headerlink" title="UIControl"></a>UIControl</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIControl</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UIController controller;<span class="comment">//副控制器(附属于哪个控制器)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向上层检查，赋值副控制器</span></span><br><span class="line">        <span class="keyword">if</span>(transform.parent != <span class="literal">null</span>)&#123;<span class="comment">//有父物体(控制器)</span></span><br><span class="line">            controller = transform.GetComponentInParent&lt;UIController&gt;();</span><br><span class="line">            <span class="comment">//将自身添加到副控制器的字典中</span></span><br><span class="line">            <span class="keyword">if</span>(controller != <span class="literal">null</span>)&#123;</span><br><span class="line">                controller.UIControlDic.Add(transform.name,<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更改文本,将常用方法封装在UIControl里</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeText</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.GetComponent&lt;Text&gt;() != <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.GetComponent&lt;Text&gt;().text = str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeIntText</span>(<span class="params"><span class="built_in">int</span> change</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.GetComponent&lt;Text&gt;() != <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>.GetComponent&lt;Text&gt;().text = change.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeIntModeText</span>(<span class="params"><span class="built_in">int</span> change,<span class="built_in">string</span> mode</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.GetComponent&lt;Text&gt;() != <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>.GetComponent&lt;Text&gt;().text = change.ToString(mode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更改图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeImage</span>(<span class="params">Sprite sprite</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.GetComponent&lt;Image&gt;()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.GetComponent&lt;Image&gt;().sprite = sprite;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件-点击按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddButtonClickEvent</span>(<span class="params">UnityAction action</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//Tip:UnityAction是一个委托（Delegate）类型</span></span><br><span class="line">        <span class="comment">//委托：简单说可以说成是一个方法的别名，委托可以指向一个与其具有相同标签的方法</span></span><br><span class="line">        <span class="comment">//如：定义一个委托 public delegate int MyDelegate (string s);</span></span><br><span class="line">        <span class="comment">//这个委托可以引用一个具有相同参数（任何一个方法参数是一个string的方法）的方法</span></span><br><span class="line">        <span class="comment">//声明委托：定义一个带有一个string参数的名为PrintName的方法，打印字符串。然后声明委托：</span></span><br><span class="line">        <span class="comment">// MyDelegate my = new MyDelegate(PrintName);</span></span><br><span class="line">        <span class="comment">//现在，使用my(&quot;Hello&quot;);=使用PrintName(&quot;Hello&quot;);</span></span><br><span class="line">        <span class="comment">//这个action可以说是一个没有参数的委托声明（不严谨）</span></span><br><span class="line">        <span class="comment">//有关UnityAction委托，可以自行上网</span></span><br><span class="line">        Button control = <span class="keyword">this</span>.GetComponent&lt;Button&gt;();</span><br><span class="line">        <span class="keyword">if</span>(control != <span class="literal">null</span>)&#123;</span><br><span class="line">            control.onClick.AddListener(action);<span class="comment">//添加事件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//Slider</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SliderEvent</span>(<span class="params">UnityAction&lt;<span class="built_in">float</span>&gt; action</span>)</span>&#123;</span><br><span class="line">        Slider control = <span class="keyword">this</span>.GetComponent&lt;Slider&gt;();</span><br><span class="line">        <span class="keyword">if</span>(control != <span class="literal">null</span>)&#123;</span><br><span class="line">            control.onValueChanged.AddListener(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//InputField(输入框)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddInputFieldEvent</span>(<span class="params">UnityAction&lt;<span class="built_in">string</span>&gt; action</span>)</span>&#123;</span><br><span class="line">        InputField control = <span class="keyword">this</span>.GetComponent&lt;InputField&gt;();</span><br><span class="line">        <span class="keyword">if</span>(control != <span class="literal">null</span>)&#123;</span><br><span class="line">            control.onValueChanged.AddListener(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h1>先创建Canvas，然后创建Button（旧版），取名MenuButton。将MenuButton的字调大，内容为菜单。<br>然后创建一个Panel，取名MainController。将MainController的大小调节到和Menu一样<br>然后创建一个Panel，取名MenuController。它的大小约为整张画布的六分之一（最后有图）<br>在MenuController下创建一些横条Button填满panel（如果填不满把Panel的Image的勾去掉），先创建StateButton（角色状态），<br>ItemButton（背包），SkillButton（技能），CloseButton（关闭页面）名字的Button。<br><img src="https://z1.ax1x.com/2023/12/09/piRFVZq.png" alt="piRFVZq.png"><br>现在，我们有两层UI界面<br>再添加一个Panel取名StateController，用来显示角色状态，将Panel的Image组件里的Background调为灰色。<br>可以在角色状态面板里写任何东西，实现过程这里不写。我的StateController：<br><img src="https://z1.ax1x.com/2023/12/09/piRkwNV.png" alt="piRkwNV.png"><br>最后，还要加上关闭按钮，直接复制即可（懒得传图了，关闭按钮不在图上）<br>接着复制StateController，做出背包和技能的页面，无需实现细节，只要能看出谁是谁就行。<h1 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h1>将UIMagager赋给Canvas。<br>创建MainController脚本。<h2 id="MainController"><a href="#MainController" class="headerlink" title="MainController"></a>MainController</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainController</span> : <span class="title">UIController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给菜单按钮添加事件</span></span><br><span class="line">        UIManager.Instance.GetComponent&lt;UIManager&gt;().GetUIControl(transform.name,<span class="string">&quot;MenuButton&quot;</span>).AddButtonClickEvent(ShowMenu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMenu</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//打印测试</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;HELLO,UNITY!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
挂载到MainController上。<br>运行测试，成功报错！<br>问题出在UIController的Awake方法里。这时UIManager的单例还没有加载好，单例为空。因此检测不到Instance，<br>报出空异常。<br>此时，需要让UIManager抢先运行。<br>在unity中单击UIManager脚本，选择检查器上的Execution Order按钮，点一下+号，选UIManager，旁边的数值越小执行速度越快，这里填-99。<br>（Tip：填完之后一定要apply（应用）！）<br>之后还会有报错，显示添加了相同的键。修改UIController的Awake方法：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将当前的页面控制器添加到Manager中</span></span><br><span class="line"> <span class="keyword">if</span>(!UIManager.Instance.GetComponent&lt;UIManager&gt;().UIControllerDic.ContainsKey(transform.name))&#123;</span><br><span class="line">           UIManager.Instance.GetComponent&lt;UIManager&gt;().UIControllerDic.Add(transform.name,<span class="keyword">this</span>); </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
为了便捷使用UIManager的单例，在UIController里创建Instance变量：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> UIManager Instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">Instance = UIManager.Instance.GetComponent&lt;UIManager&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
现在,重新回到MainController：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainController</span> : <span class="title">UIController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给菜单按钮添加事件</span></span><br><span class="line">        UIManager.Instance.GetComponent&lt;UIManager&gt;().GetUIControl(transform.name,<span class="string">&quot;MenuButton&quot;</span>).AddButtonClickEvent(ShowMenu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMenu</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//关闭自己，显示菜单</span></span><br><span class="line">        Instance.SetActive(<span class="string">&quot;MenuController&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行测试。<h2 id="MenuController"><a href="#MenuController" class="headerlink" title="MenuController"></a>MenuController</h2>把MainController关掉，把MenuController开启。<br>创建MenuController脚本，挂载到MenuController上。<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MenuController</span> : <span class="title">UIController</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//状态按钮事件</span></span><br><span class="line">        Instance.GetUIControl(transform.name,<span class="string">&quot;StateButton&quot;</span>).AddButtonClickEvent(ShowStateController);</span><br><span class="line">       <span class="comment">//其他事件</span></span><br><span class="line">        Instance.GetUIControl(transform.name,<span class="string">&quot;ItemButton&quot;</span>).AddButtonClickEvent(ShowItemController);</span><br><span class="line">        Instance.GetUIControl(transform.name,<span class="string">&quot;SkillButton&quot;</span>).AddButtonClickEvent(ShowSkillController);</span><br><span class="line">        Instance.GetUIControl(transform.name,<span class="string">&quot;CloseButton&quot;</span>).AddButtonClickEvent(CloseController);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态页面方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShowStateController</span>()</span>&#123;</span><br><span class="line">        Instance.SetActive(<span class="string">&quot;StateController&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShowItemController</span>()</span>&#123;</span><br><span class="line">         Instance.SetActive(<span class="string">&quot;ItemController&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShowSkillController</span>()</span>&#123;</span><br><span class="line">         Instance.SetActive(<span class="string">&quot;SkillController&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CloseController</span>()</span>&#123;</span><br><span class="line">        Instance.SetActive(<span class="string">&quot;MainController&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这样，基本的UI就完成了。<h2 id="StateController"><a href="#StateController" class="headerlink" title="StateController"></a>StateController</h2>using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.ComponentModel;<br>using UnityEngine;</li>
</ul>
<p>public class StateController : UIController<br>{<br>    // Start is called before the first frame update<br>    void Start()<br>    {<br>           Instance.GetUIControl(transform.name,”CloseButton”).AddButtonClickEvent(CloseController); </p>
<pre><code>&#125;

// Update is called once per frame
void Update()
&#123;
    
&#125;
void CloseController()&#123;
    Instance.SetActive(&quot;MenuController&quot;,true);
    gameObject.SetActive(false);
&#125;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## ItemController</span><br><span class="line">```csharp</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.ComponentModel;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ItemController : UIController</span><br><span class="line">&#123;</span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        Instance.GetUIControl(transform.name,&quot;CloseButton&quot;).AddButtonClickEvent(CloseController);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    void CloseController()&#123;</span><br><span class="line">        Instance.SetActive(&quot;MenuController&quot;,true);</span><br><span class="line">        gameObject.SetActive(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SkillController"><a href="#SkillController" class="headerlink" title="SkillController"></a>SkillController</h2><p>using System.Collections;<br>using System.Collections.Generic;<br>using UnityEngine;</p>
<p>public class SkillController : UIController<br>{<br>    // Start is called before the first frame update<br>    void Start()<br>    {<br>        Instance.GetUIControl(transform.name,”CloseButton”).AddButtonClickEvent(CloseController);<br>    }</p>
<pre><code>// Update is called once per frame
void Update()
&#123;
    
&#125;
void CloseController()&#123;
    Instance.SetActive(&quot;MenuController&quot;,true);
    gameObject.SetActive(false);
&#125;
</code></pre>
<p>}</p>
<pre><code>还有一些逻辑，功能，这里就不去实现了。
运行，测试，结束。
</code></pre>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-对象池管理器</title>
    <url>/2024/06/08/Unity%E7%AC%94%E8%AE%B0-%E5%AF%B9%E8%B1%A1%E6%B1%A0%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h2 id="对象池的概念"><a href="#对象池的概念" class="headerlink" title="对象池的概念"></a>对象池的概念</h2><p>对象池：<br>当<strong>预制体需要在特定场景里多次生成，销毁(如子弹)<strong>时，可以将使用完的预制体放到一个集合（对象池）里储存，下次使用不用重新生成，直接取出就好。如果</strong>对象池里没有对应的预制体，则再生成一个</strong><br><strong>一个对象池就是一个持有一些可循环利用对象的集合</strong><br><strong>当场景中需要对象池的预制体较多时，可能会需要多个对象池</strong><br><strong>所以，需要一个持有一些对象池的管理器</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using...</span><br><span class="line">//对象池</span><br><span class="line">public class PoolStack</span><br><span class="line">&#123;</span><br><span class="line">    //集合</span><br><span class="line">    public Stack&lt;UnityEngine.Object&gt; stack = new Stack(Object)();</span><br><span class="line">    public int MaxCount = 100;//最大个数</span><br><span class="line">    //把游戏物体放入对象池</span><br><span class="line">    public void Push(UnityEngine.Object object)&#123;</span><br><span class="line">        if(stack.Count&lt;MaxCount)&#123;</span><br><span class="line">            stack.Push(object);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            GameObject.Destroy(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //从对象池取出一个游戏物体</span><br><span class="line">    public UnityEngine.Object Pop()&#123;</span><br><span class="line">        if(stack.Count &gt; 0)&#123;</span><br><span class="line">            return stack.Pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    public void Clear()&#123;</span><br><span class="line">        foreach(UnityEngine.Object go in stack)&#123;</span><br><span class="line">            GameObject.Destroy(go);</span><br><span class="line">            stack.Clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class PoolManager</span><br><span class="line">&#123;</span><br><span class="line">    //单例类的一些操作...此处不详写 可以阅读Unity笔记-泛型单例</span><br><span class="line">    //管理多个池子</span><br><span class="line">    Dictionary&lt;string,PoolStack&gt; poolDic = new Dictionary&lt;string,PoolStack&gt;();</span><br><span class="line">    //从对象池取出对象，没有则创建一个</span><br><span class="line">    public UnityEngine.Object Spawn(string poolName UnityEngine.Object prefab)&#123;</span><br><span class="line">        //没有对象池则创建</span><br><span class="line">        if(!poolDic.CoutainsKey(poolName))&#123;</span><br><span class="line">            poolDic.Add(&quot;poolName&quot;,new PoolStack());</span><br><span class="line">        &#125;</span><br><span class="line">        //从池子中拿出一个</span><br><span class="line">        UnityEngine.Object go = poolDic[poolName].Pop();</span><br><span class="line">        if(go==null) go = GameObject.Instantiate(prefab);</span><br><span class="line">        return go;</span><br><span class="line">    &#125;</span><br><span class="line">    //清空</span><br><span class="line">    public void UnSpawn(string poolName)&#123;</span><br><span class="line">        if(poolDic.ContainsKey(poolName))&#123;</span><br><span class="line">            poolDic[poolName].Clear();</span><br><span class="line">            poolDic.Remove(poolName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-泛型单例</title>
    <url>/2023/12/04/Unity%E7%AC%94%E8%AE%B0-%E6%B3%9B%E5%9E%8B%E5%8D%95%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>一个类只有一个对象（实例）叫做单例模式。适用于管理类。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*unity单例模式：</span></span><br><span class="line"><span class="comment">只能将单例脚本挂载到一个对象上，且一个对象只能有一个此单例脚本。</span></span><br><span class="line"><span class="comment">优点：单例模式的脚本只能有一个对象，使用对象方便。</span></span><br><span class="line"><span class="comment">一般要给外界提供一个访问变量，让外界来访问唯一的该类所生成的对象。</span></span><br><span class="line"><span class="comment">只希望外界访问，不希望外界修改（因为管理器一般自主控制，修改变量），所以使用private关键字。*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ClassName instance;</span><br><span class="line"><span class="comment">//不提供set，只提供get访问。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ClassName Instance&#123;</span><br><span class="line">	<span class="keyword">get</span>&#123;</span><br><span class="line">	   <span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防止出现null异常，在Awake()里添加逻辑：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于外界访问instance,使用如下逻辑：</span></span><br><span class="line">ClassName obj = ClassName.Instance;</span><br></pre></td></tr></table></figure>
<p>对于使用多个单例的场景，可以使用泛型单例基类</p>
<h1 id="泛型单例基类"><a href="#泛型单例基类" class="headerlink" title="泛型单例基类"></a>泛型单例基类</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassName</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span><span class="comment">//定义泛型 具体类型由传入的类型决定 限制T为MonoBehaviour或它的子类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> T Instance&#123;</span><br><span class="line"><span class="keyword">get</span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">instance = <span class="keyword">this</span> <span class="keyword">as</span> T;<span class="comment">//类型转换 把this转换为T类型的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDestory</span>()</span>&#123;</span><br><span class="line">instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基类继承"><a href="#基类继承" class="headerlink" title="基类继承"></a>基类继承</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassName1</span> : <span class="title">ClassName</span>&lt;<span class="title">ClassName1</span>&gt;&#123;</span><br><span class="line"><span class="comment">//直接继承ClassName类里的所有方法 无需多写，该类即为单例类</span></span><br><span class="line"><span class="comment">//ClassName1传入了ClassName1类型给T，因此，之前用T类型的变量在继承的ClassName1里都变成了ClassName1类型</span></span><br><span class="line"><span class="comment">//(Tip:传类型给T不影响基类)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="访问单例类"><a href="#访问单例类" class="headerlink" title="访问单例类"></a>访问单例类</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> ClassName c1=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> ClassName1 c2=<span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">c1 = ClassName.Instance;</span><br><span class="line">c2 = ClassName1.Instance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="普通csharp类实现单例"><a href="#普通csharp类实现单例" class="headerlink" title="普通csharp类实现单例"></a>普通csharp类实现单例</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test1</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Test1 instance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Test1 Instance&#123;</span><br><span class="line"><span class="keyword">get</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;<span class="comment">//判断是否为空</span></span><br><span class="line">instance = <span class="keyword">new</span> Test1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-消息框架</title>
    <url>/2023/12/04/Unity%E7%AC%94%E8%AE%B0-%E6%B6%88%E6%81%AF%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="消息框架"><a href="#消息框架" class="headerlink" title="消息框架"></a>消息框架</h1><p>这是比较简单的给脚本组件发送指令（消息）的图例：<br><img src="https://z1.ax1x.com/2023/12/05/pi6qlUP.png"><br>适用于小型demo。<br>中等难度的：<br><img src="https://z1.ax1x.com/2023/12/05/pi6q14f.png"><br>适用于小型游戏和部分中型游戏。<br>高级的：<br><img src="https://z1.ax1x.com/2023/12/07/piggDIJ.png"><br>适用于中型游戏和部分大型游戏。<br>消息框架的作用是让各个类更方便的传输数据，达到简洁有条理的工作效果。<br>虽然越往上，创建的类越多，但是整个代码框架更加有条理。而且不容易出错。</p>
<h1 id="编写消息类"><a href="#编写消息类" class="headerlink" title="编写消息类"></a>编写消息类</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Message</span> <span class="comment">//消息基类不需要继承MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//类型(UI 角色 声音......)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">byte</span> Type;</span><br><span class="line">	<span class="comment">//命令</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> Command;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//参数</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">object</span> Content;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Message</span>()</span> &#123;&#125;<span class="comment">//如果需要以后赋值 则需要一个空的构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Message</span>(<span class="params"><span class="built_in">byte</span> type,<span class="built_in">int</span> command,<span class="built_in">object</span> content</span>)</span>&#123;</span><br><span class="line">	Type = type;</span><br><span class="line">	Command = command;</span><br><span class="line">	Content = content;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消息类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageType</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span> Type_Audio=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span> Type__UI = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span> Type_Player=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Audio_PlaySound = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Audio_StopSound = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Audio_PlayMusic = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> UI_AddScore=<span class="number">100</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="功能脚本"><a href="#功能脚本" class="headerlink" title="功能脚本"></a>功能脚本</h1><p>写消息究竟要执行哪些功能的脚本。<br>实现一个功能基类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.VersionControl;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoBase</span> : <span class="title">MonoBehaviour</span><span class="comment">//功能基类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params">Message message</span>)</span>&#123;<span class="comment">//接收消息</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后实现管理类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ManagerBase</span> : <span class="title">MySingletonBase</span>&lt;<span class="title">ManagerBase</span>&gt;<span class="comment">//管理基类，不能被实例化</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="comment">//管理的功能模块</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;MonoBase&gt; Monos = <span class="keyword">new</span> List&lt;MonoBase&gt;();</span><br><span class="line">    <span class="comment">//给功能模块一个注册方法(注册在xx管理类下面)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">MonoBase mono</span>)</span>&#123;<span class="comment">//添加功能</span></span><br><span class="line">        <span class="comment">//若功能模块不在数组中，则添加到数组中</span></span><br><span class="line">        <span class="keyword">if</span>(!Monos.Contains(mono))&#123;</span><br><span class="line">            Monos.Add(mono);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params">Message message</span>)</span>&#123;<span class="comment">//接收消息</span></span><br><span class="line">        <span class="comment">//如果消息类型不匹配，不向下传递</span></span><br><span class="line">        <span class="keyword">if</span>(message.Type!=GetMessageType())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果匹配则向下传递</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> mono <span class="keyword">in</span> Monos)&#123;</span><br><span class="line">            mono.ReceiveMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置当前管理类接受的消息类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">byte</span> <span class="title">GetMessageType</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="消息中心类"><a href="#消息中心类" class="headerlink" title="消息中心类"></a>消息中心类</h1><p>消息中心类管理着管理类，管理类再管理注册到管理类的功能</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageCenter</span> : <span class="title">MySingletonBase</span>&lt;<span class="title">MessageCenter</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ManagerBase&gt; Managers = <span class="keyword">new</span> List&lt;ManagerBase&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">ManagerBase manager</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!Managers.Contains(manager))&#123;</span><br><span class="line">            Managers.Add(manager);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendCustomMessage</span>(<span class="params">Message message</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> manager <span class="keyword">in</span> Managers)&#123;</span><br><span class="line">            manager.ReceiveMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>在unity中创建一个平面（plane）和一个胶囊（player）<br><img src="https://z1.ax1x.com/2023/12/05/pi6vyng.png"><br>为player添加刚体，并开启运动学模式，冻结旋转xyz。<br><img src="https://z1.ax1x.com/2023/12/05/pi6vWhq.png"><br>可以将材质赋值给player<br>玩法是player吃金币，所以创建一个球体（coin）<br>给球体一个材质（可选）<br>接着，勾选coin碰撞体组件的is Trigger<br>在场景上复制多个coin<br>创建空物体GameManager 附加Message Center脚本<br>接下来，创建一个画布和一个Panel（面板），切换2d视图，把面板缩放到画布左上角，接着，把锚点也放到左上角<br><img src="https://z1.ax1x.com/2023/12/05/pi6x15n.png"><br>在面板底下创建面板子对象Text（旧版），Text内容为分数：0，其余随便</p>
<h1 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h1><p>先创建三个脚本：</p>
<ul>
<li>UIManager UI管理器</li>
<li>PlayerManager 玩家管理器</li>
<li>Panel 挂载在分数上的功能脚本<h2 id="UIManager"><a href="#UIManager" class="headerlink" title="UIManager"></a>UIManager</h2>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span> : <span class="title">ManagerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//注册到消息中心</span></span><br><span class="line">        MessageCenter.Instance.Register(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span> <span class="title">GetMessageType</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定管理器类型是UI</span></span><br><span class="line">        <span class="keyword">return</span> MessageType.Type__UI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h2>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Penal</span> : <span class="title">MonoBase</span> <span class="comment">//继承功能基类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Text text;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// 注册到UI管理器</span></span><br><span class="line">        UIManager.Instance.Register(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params">Message message</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">base</span>.ReceiveMessage(message);<span class="comment">//base关键字:是用来调用基类方法，类似java的super</span></span><br><span class="line">        <span class="comment">//判断消息</span></span><br><span class="line">        <span class="keyword">if</span>(message.Command == MessageType.UI_AddScore)&#123;</span><br><span class="line">            <span class="built_in">int</span> score = (<span class="built_in">int</span>)message.Content;<span class="comment">//Content:参数</span></span><br><span class="line">            text.text = <span class="string">&quot;分数：&quot;</span>+score;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PlayerManager"><a href="#PlayerManager" class="headerlink" title="PlayerManager"></a>PlayerManager</h2>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//分数</span></span><br><span class="line">    <span class="built_in">int</span> score=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取输入向量</span></span><br><span class="line">        <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> v = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        Vector3 dir = <span class="keyword">new</span> Vector3(h,<span class="number">0</span>,v);<span class="comment">//得到向量值</span></span><br><span class="line">        <span class="keyword">if</span>(dir != Vector3.zero)&#123;<span class="comment">//如果向量！=0，则player按了键</span></span><br><span class="line">        <span class="comment">//移动</span></span><br><span class="line">        transform.Translate(dir * <span class="number">5</span> * Time.deltaTime);<span class="comment">//每帧移动</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> OnTriggerEnter is called when the Collider other enters the trigger.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;other&quot;&gt;</span>The other Collider involved in this collision.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//碰到金币</span></span><br><span class="line">        <span class="keyword">if</span>(other.tag == <span class="string">&quot;coin&quot;</span>)&#123;</span><br><span class="line">            score++;</span><br><span class="line">            <span class="comment">//销毁金币</span></span><br><span class="line">            Destroy(other.gameObject);</span><br><span class="line">            <span class="comment">//发送消息更新UI</span></span><br><span class="line">            MessageCenter.Instance.SendCustomMessage(<span class="keyword">new</span> Message(MessageType.Type_UI,MessageType.UI_AddScore,score));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
最后，将PlayerManager挂载到player上，UImanager挂载到Canvas上，Penal挂载到Penal上<br>运行测试，通过发送消息（命令）让玩家移动，吃取金币，加载分数。<br>这是一个最简的消息框架，看起来复杂，但作用非常大。<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1></li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-状态机</title>
    <url>/2023/12/06/Unity%E7%AC%94%E8%AE%B0-%E7%8A%B6%E6%80%81%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="有限状态机-FSM"><a href="#有限状态机-FSM" class="headerlink" title="有限状态机(FSM)"></a>有限状态机(FSM)</h1><p>有限状态：状态持续时长有限（例：人物有很多状态，如跑步，攻击，游泳。这些状态需进行切换，不可能无限进行一个状态,如人物不可能一直保持攻击状态，<br>不进行跑步，游泳）<br>切换这些状态的东西叫做状态机。<br>举例：下面是一个角色相关脚本</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(按下wasd)&#123;</span><br><span class="line">移动</span><br><span class="line">播放移动动画</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">静止</span><br><span class="line">播放站立动画</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(按下空格)&#123;</span><br><span class="line">跳跃</span><br><span class="line">播放跳跃动画</span><br><span class="line">播放声音</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法优点：简单<br>该方法缺点：繁琐，if过多，重复元素多，状态过多时可读性降低，代码简洁性低<br>状态机把这些状态独立出来，这时状态机只做切换，不用知道状态实现过程<br>这是一种面向对象思想<br>简单有限状态机：将每个状态独立成一个方法<br>优点：简单，体现面向对象思想，封装成方法使用便捷<br>缺点：大型使用场景依然不够方便<br>普通有限状态机：将每个状态独立成一个类，继承一个状态基类<br>优点：逻辑清晰有条理，更加简单<br>缺点：代码量提升</p>
<h1 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h1><p>在工程项目中导入 Character Pack：Free Sample包（去Unity资源商城下，免费）<br>在Assets\Supercyan Character Pack Free Sample\Prefabs\Base\High Quality选择MaleFree1，创建一个平面，将模型放置到平面上。<br>在文件夹中找到common_people@idle（待机）common_people@run（跑步）common_people@wave（招手）再创建一个动画控制器（Player），将三个动画<br>拖进里面，再创建一个Bool参数IsRun。在待机和跑步中相互创建过渡，过渡条件是IsRun的值。将两个过渡的退出时间关掉。<br>创建一个Trigger参数Wave，将待机切换为挥手的过渡条件设置为Wave，并且将此过渡的退出时间和固定持续时间关闭（第一个和第三个参数）</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul>
<li>创建Script文件夹。</li>
<li>创建一个csharp脚本PlayerController<h2 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h2>不使用状态机，初始版本代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="comment">//获取动画控制器</span></span><br><span class="line">    <span class="keyword">private</span> Animator ani;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ani = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取用户的水平和垂直方向的输入</span></span><br><span class="line">        <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> v = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        <span class="comment">//创建为一个方向向量</span></span><br><span class="line">        Vector3 dir = <span class="keyword">new</span> Vector3(h,<span class="number">0</span>,v);</span><br><span class="line">        <span class="comment">//如果向量不为空</span></span><br><span class="line">        <span class="keyword">if</span>(dir!=Vector3.zero)&#123;</span><br><span class="line">            <span class="comment">//用户按下移动按键</span></span><br><span class="line">            <span class="comment">//移动</span></span><br><span class="line">            transform.rotation = Quaternion.LookRotation(dir);</span><br><span class="line">            transform.Translate(Vector3.forward * <span class="number">3</span> * Time.deltaTime);</span><br><span class="line">            <span class="comment">//播放动画</span></span><br><span class="line">            ani.SetBool(<span class="string">&quot;IsRun&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//用户松开移动按键</span></span><br><span class="line">            ani.SetBool(<span class="string">&quot;IsRun&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按下空格</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">&#123;</span><br><span class="line">    ani.SetTrigger(<span class="string">&quot;Wave&quot;</span>);</span><br><span class="line">&#125;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
挂载到Player身上，运行。<br>小人成功移动，除招手动画无异常，即可阅读下一模块。<h2 id="V2"><a href="#V2" class="headerlink" title="V2"></a>V2</h2>在刚才的V1代码中，小人招手的时候可以进行移动，但不会实现移动动画。看起来很奇怪。这是因为代码是由上往下执行的。当挥手动作执行时也会<br>执行上面的移动。在以后代码中会改进这一问题。<br>创建PlayerControl2脚本<br>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> PlayerState&#123;<span class="comment">//枚举</span></span><br><span class="line">    idle,</span><br><span class="line">    run,</span><br><span class="line">    wave</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerContorl2</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Animator ani;</span><br><span class="line">    <span class="keyword">private</span> PlayerState state = PlayerState.idle;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Update is called every frame, if the MonoBehaviour is enabled.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">            <span class="keyword">case</span> PlayerState.idle:</span><br><span class="line">            idle();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PlayerState.run:</span><br><span class="line">            run();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PlayerState.wave:</span><br><span class="line">            wave();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">idle</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//获取用户的水平和垂直方向的输入</span></span><br><span class="line">        <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> v = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">         <span class="comment">//创建为一个方向向量</span></span><br><span class="line">        Vector3 dir = <span class="keyword">new</span> Vector3(h,<span class="number">0</span>,v);</span><br><span class="line">        <span class="comment">//如果向量不为空</span></span><br><span class="line">        <span class="keyword">if</span>(dir==Vector3.zero)&#123;</span><br><span class="line">            </span><br><span class="line">            ani.SetBool(<span class="string">&quot;IsRun&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        state = PlayerState.run;<span class="comment">//不管实现过程，只去调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.Space))&#123;</span><br><span class="line">                state = PlayerState.wave;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span>()</span>&#123;</span><br><span class="line">            <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> v = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        <span class="comment">//创建为一个方向向量</span></span><br><span class="line">        Vector3 dir = <span class="keyword">new</span> Vector3(h,<span class="number">0</span>,v);</span><br><span class="line">         <span class="comment">//如果向量不为空</span></span><br><span class="line">        <span class="keyword">if</span>(dir!=Vector3.zero)&#123;</span><br><span class="line">            <span class="comment">//用户按下移动按键</span></span><br><span class="line">            <span class="comment">//移动</span></span><br><span class="line">            transform.rotation = Quaternion.LookRotation(dir);</span><br><span class="line">            transform.Translate(Vector3.forward * <span class="number">3</span> * Time.deltaTime);</span><br><span class="line">            <span class="comment">//播放动画</span></span><br><span class="line">            ani.SetBool(<span class="string">&quot;IsRun&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            state = PlayerState.idle;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">wave</span>()</span>&#123;</span><br><span class="line">            <span class="comment">//播放挥手动画</span></span><br><span class="line">            ani.SetTrigger(<span class="string">&quot;Wave&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!ani.GetCurrentAnimatorStateInfo(<span class="number">0</span>).IsName(<span class="string">&quot;Wave&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//如果没有播放挥手动画</span></span><br><span class="line">                state = PlayerState.idle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
解析一下：首先定义了一个枚举，定义了idle，run，wave三个成员（值分别是1，2，3）<br>然后就是定义三个方法，状态切换时每个状态不用像V1一样关注另一个状态，直接切换枚举值。<br>然后使用Switch来互相切换状态，达到状态机的作用。<br>在Wave方法里，使用了!ani.GetCurrentAnimatorStateInfo(0).IsName(“Wave”)判断当前动画是否播放完。<h1 id="V3"><a href="#V3" class="headerlink" title="V3"></a>V3</h1><h2 id="状态基类"><a href="#状态基类" class="headerlink" title="状态基类"></a>状态基类</h2>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FSMState</span><span class="comment">//状态基类</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当前状态ID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StateID;</span><br><span class="line">    <span class="comment">//状态拥有者</span></span><br><span class="line">    <span class="keyword">public</span> MonoBehaviour Mono;</span><br><span class="line">    <span class="comment">//状态所属管理器</span></span><br><span class="line">    <span class="keyword">public</span> FSMManager FsmManager;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FSMState</span>(<span class="params"><span class="built_in">int</span> stateID,MonoBehaviour mono,FSMManager manager</span>)</span>&#123;</span><br><span class="line">        StateID = stateID;</span><br><span class="line">        Mono = mono;</span><br><span class="line">        FsmManager = manager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入状态，会调用一次方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span>;</span><br><span class="line">    <span class="comment">//在状态中每帧调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态管理器基类"><a href="#状态管理器基类" class="headerlink" title="状态管理器基类"></a>状态管理器基类</h2>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//状态机管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FSMManager</span><span class="comment">//非单例 可以有很多个类型的状态机</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//状态列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;FSMState&gt; StateList = <span class="keyword">new</span> List&lt;FSMState&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CurrentIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//改变状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params"><span class="built_in">int</span> StateID</span>)</span>&#123;</span><br><span class="line">        CurrentIndex = StateID;</span><br><span class="line">        <span class="comment">//执行一次该状态的进入方法</span></span><br><span class="line">        StateList[CurrentIndex].OnEnter();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(CurrentIndex != <span class="number">-1</span>)&#123;</span><br><span class="line">            StateList[CurrentIndex].OnUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="普通状态机"><a href="#普通状态机" class="headerlink" title="普通状态机"></a>普通状态机</h2></li>
<li>创建 PlayerControl3 脚本</li>
<li>创建 Idle Run Wave 脚本<h3 id="Idle"><a href="#Idle" class="headerlink" title="Idle"></a>Idle</h3>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Idle</span> : <span class="title">FSMState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> PlayerState&#123;<span class="comment">//枚举</span></span><br><span class="line">    idle,</span><br><span class="line">    run,</span><br><span class="line">    wave</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//播放站立动画</span></span><br><span class="line">        Mono.GetComponent&lt;Animator&gt;().SetBool(<span class="string">&quot;IsRun&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断是否变为跑步</span></span><br><span class="line">        <span class="comment">//获取用户的水平和垂直方向的输入</span></span><br><span class="line">        <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> v = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        <span class="comment">//创建为一个方向向量</span></span><br><span class="line">        Vector3 dir = <span class="keyword">new</span> Vector3(h,<span class="number">0</span>,v);</span><br><span class="line">        <span class="comment">//如果向量不为空</span></span><br><span class="line">        <span class="keyword">if</span>(dir!=Vector3.zero)&#123;</span><br><span class="line">            <span class="comment">//切换跑步状态</span></span><br><span class="line">            FsmManager.ChangeState((<span class="built_in">int</span>)PlayerState.run);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//监听是否挥手</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.Space))&#123;</span><br><span class="line">            FsmManager.ChangeState((<span class="built_in">int</span>)PlayerState.wave);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Idle</span>(<span class="params"><span class="built_in">int</span> stateID,MonoBehaviour mono,FSMManager manager</span>) : <span class="title">base</span>(<span class="params">stateID,mono,manager</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3>代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Run</span> : <span class="title">FSMState</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">enum</span> PlayerState&#123;<span class="comment">//枚举</span></span><br><span class="line">    idle,</span><br><span class="line">    run,</span><br><span class="line">    wave</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Run</span>(<span class="params"><span class="built_in">int</span> stateID,MonoBehaviour mono,FSMManager manager</span>) : <span class="title">base</span>(<span class="params">stateID,mono,manager</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Mono.GetComponent&lt;Animator&gt;().SetBool(<span class="string">&quot;IsRun&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>()</span>&#123;</span><br><span class="line">         <span class="built_in">float</span> h = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> v = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        <span class="comment">//创建为一个方向向量</span></span><br><span class="line">        Vector3 dir = <span class="keyword">new</span> Vector3(h,<span class="number">0</span>,v);</span><br><span class="line">         <span class="comment">//如果向量不为空</span></span><br><span class="line">        <span class="keyword">if</span>(dir!=Vector3.zero)&#123;</span><br><span class="line">            <span class="comment">//用户按下移动按键</span></span><br><span class="line">            <span class="comment">//移动</span></span><br><span class="line">           Mono. transform.rotation = Quaternion.LookRotation(dir);</span><br><span class="line">           Mono. transform.Translate(Vector3.forward * <span class="number">3</span> * Time.deltaTime);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    FsmManager.ChangeState((<span class="built_in">int</span>)PlayerState.idle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Wave"><a href="#Wave" class="headerlink" title="Wave"></a>Wave</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wave</span> : <span class="title">FSMState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wave</span>(<span class="params"><span class="built_in">int</span> stateID,MonoBehaviour mono,FSMManager manager</span>) : <span class="title">base</span>(<span class="params">stateID,mono,manager</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnEnter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Mono.GetComponent&lt;Animator&gt;().SetTrigger(<span class="string">&quot;Wave&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Mono.GetComponent&lt;Animator&gt;().GetCurrentAnimatorStateInfo(<span class="number">0</span>).IsName(<span class="string">&quot;wave&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//切换为Idle</span></span><br><span class="line">            FsmManager.ChangeState((<span class="built_in">int</span>)PlayerState.idle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PlayerControl3"><a href="#PlayerControl3" class="headerlink" title="PlayerControl3"></a>PlayerControl3</h3>开始编辑V3状态机：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerControl3</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="keyword">private</span> FSMManager fsmManager;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化状态机管理器</span></span><br><span class="line">        fsmManager = <span class="keyword">new</span> FSMManager();</span><br><span class="line">        <span class="comment">//创建状态</span></span><br><span class="line">        Idle idle = <span class="keyword">new</span> Idle(<span class="number">0</span>,<span class="keyword">this</span>,fsmManager);</span><br><span class="line">        Run run = <span class="keyword">new</span> Run(<span class="number">1</span>,<span class="keyword">this</span>,fsmManager);</span><br><span class="line">        Wave wave = <span class="keyword">new</span> Wave(<span class="number">2</span>,<span class="keyword">this</span>,fsmManager);</span><br><span class="line">        <span class="comment">//状态注册</span></span><br><span class="line">        fsmManager.StateList.Add(idle);</span><br><span class="line">        fsmManager.StateList.Add(run);</span><br><span class="line">        fsmManager.StateList.Add(wave);</span><br><span class="line">        <span class="comment">//给一个默认状态</span></span><br><span class="line">        fsmManager.ChangeState((<span class="built_in">int</span>)PlayerState.idle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        fsmManager.Update();<span class="comment">//调用自己写的Update</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后将idle到wave的过渡时间设置为0，不然小人挥手时还是能动。（具体原因未知，知道的可以评论下)<br>挂载到player身上，运行。</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-背包管理器</title>
    <url>/2024/05/27/Unity%E7%AC%94%E8%AE%B0-%E8%83%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h1 id="背包管理器"><a href="#背包管理器" class="headerlink" title="背包管理器"></a>背包管理器</h1><p>创建<strong>InventoryManager</strong>脚本</p>
<p>```csharp<br>using xxx;//…<br>//背包格子类<br>public class InventoryItem<br>{<br>    //物品ID<br>    public int ItemId;<br>    //个数<br>    public int Count=1;<br>}<br>//背包管理类<br>public class InventoryManager//普通类<br>{<br>    private static InventoryManager instance;<br>    public static InventoryManager Instance<br>    {get{<br>        if(instance==null){<br>            instance = new InventoryManager();<br>    }<br>    return instance;<br>    }<br>    }<br>    //背包<br>    public List<InventoryItem> Inventory = new List<InventoryItem>();<br>    //添加物品<br>    public void AddItem(int ItemId,int count = 1){<br>        //查看背包中是否存在该物品<br>        foreach(InventoryItem tmp in Inventory){<br>            if(tmp.ItemId == ItemId){<br>                tmp.Count += count;<br>                return;<br>            }<br>        }<br>        //背包中不存在该物品<br>        InventoryItem item = new InventoryItem();<br>        item.ItemId = ItemId;<br>        item.Count = Count;<br>        Inventory.Add(item);<br>        return;<br>    }<br>    //获得物品<br>    public InventoryItem GetItem(int itemid){<br>        foreach(InventoryItem item in Inventory){<br>            if(item.ItemId == itemid){<br>                return item;<br>            }<br>        }<br>        return null;<br>    }<br>    //删除物品<br>    public void RemoveItem(int itemid,int count = 1){//count：移除多少个<br>        for(int i=0;i&lt;Inventory.Count;i++){<br>            InventoryItem i = Inventory[i];<br>            if(item.Itemid == itemid &amp;&amp; item.Count&gt;0){<br>                item.Count -= count;<br>                if(item.Count&lt;=0){<br>                    Inventory.Remove(item);<br>                }<br>            }<br>        }<br>    }<br>}</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-物品管理器</title>
    <url>/2024/03/26/Unity%E7%AC%94%E8%AE%B0-%E7%89%A9%E5%93%81%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<p><strong>准备：LitJson插件（Unity笔记-json和xml）</strong><br>使用<strong>Json</strong>来存储物品信息</p>
<ul>
<li>创建Resources文件夹（注意文件夹名字一定要是Resources）<br>右键Resources文件夹，选择Show in Explorer以资源管理器打开文件夹。<br>在Resources文件夹里创建<strong>Item.json</strong>文件<br>打开Item.json文件，输入以下json：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;宝剑&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span><span class="string">&quot;这是一把平平无奇的剑&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;attack&quot;</span><span class="punctuation">:</span><span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;弓箭&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span><span class="string">&quot;一把某人用过的弓箭&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">900</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;attack&quot;</span><span class="punctuation">:</span><span class="number">50</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
然后打开ItemManager脚本，编写以下代码：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//using...</span></span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;<span class="comment">//要与json对应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> des;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> price;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> icon;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> attack;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ItemManager instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ItemManager Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> ItemManager();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存所有物品</span></span><br><span class="line">    <span class="keyword">private</span> Item[] item;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemManager</span>()</span>&#123;</span><br><span class="line">        <span class="comment">//加载json数据</span></span><br><span class="line">        TextAsset json = Resources.Load&lt;TextAsset&gt;(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">        <span class="comment">//解析json</span></span><br><span class="line">        item = LitJson.JsonMapper.ToObject&lt;Item[]&gt;(json.text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取物品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">GetItem</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(Item i <span class="keyword">in</span> item)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i.id == id)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记-角色管理器</title>
    <url>/2024/06/08/Unity%E7%AC%94%E8%AE%B0-%E8%A7%92%E8%89%B2%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<p>类CharacterManager:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using...</span><br><span class="line">//角色管理器</span><br><span class="line">public class CharacterManager</span><br><span class="line">&#123;</span><br><span class="line">    private static CharacterManager instance;//单例</span><br><span class="line">    public static CharacterManager Instance&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            if(instance==null) instance = new Character();</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //玩家</span><br><span class="line">    public Character character = new Character();//持有的玩家属性类，如果是多个主角请改为数组</span><br><span class="line">    public int Money = 0;//钱</span><br><span class="line">    public bool canControl = true;//角色当前是否可操作</span><br><span class="line">    //人物属性</span><br><span class="line">    //增加Money的方法</span><br><span class="line">    #region 人物属性</span><br><span class="line">    //增加money</span><br><span class="line">    public void AddMoney(int money)&#123;</span><br><span class="line">        Money += money;</span><br><span class="line">        if(Money&lt;0) Money=0;</span><br><span class="line">    &#125;</span><br><span class="line">    //增加经验</span><br><span class="line">    public void AddExp(int exp)&#123;//多人加参数int index</span><br><span class="line">    character.CurrentExp += exp;</span><br><span class="line">    if(character.CurrentExp&gt;=character.GetNextlevelExp()) &#123;character.Level ++; character.CurrentExp = 0;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //增加血量</span><br><span class="line">    public void AddHp(int hp)&#123;</span><br><span class="line">        character.Hp += hp;</span><br><span class="line">        character.Hp = Mathf.Clamp(character.Hp,0,character.MaxHp); //保证血量不超过合理值</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line">    #region 人物技能</span><br><span class="line">    public bool AddSkill(Skill skill)&#123;</span><br><span class="line">        if(character.SkillList.Contains(skill)) return false;</span><br><span class="line">        character.SkillList..Add(skill);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    //是否拥有此技能</span><br><span class="line">    public bool HasSkill(Skill skill)&#123;</span><br><span class="line">        if(character.SkillList.Contains(skill)) return true;</span><br><span class="line">    &#125;</span><br><span class="line">    //移除技能</span><br><span class="line">    public void RemoveSkill(Skill skill)&#123;</span><br><span class="line">        if(character.SkillList.Contains(skill))&#123;</span><br><span class="line">            character.SkillList.Remove(skill);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public Skill[] GetSkills()&#123;</span><br><span class="line">        return character.SkillList.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line">    #region 人物装备</span><br><span class="line">    //装备武器</span><br><span class="line">    public void EquipWeapon(int id)&#123;</span><br><span class="line">        //如果背包有这个武器，才允许装备</span><br><span class="line">        InventoryItem item = InventoryManager.instance.GetItem(id); //InventoryManager:上一篇文章</span><br><span class="line">        if(item!=null)&#123;</span><br><span class="line">            InventoryManager.instance.RemoveItem(id,1);</span><br><span class="line">        &#125;</span><br><span class="line">        if(character.WeaponId &gt; -1)&#123;//-1代表没有武器</span><br><span class="line">        InventoryManager.instance.AddItem(character.WeaponId,1);</span><br><span class="line">        &#125;</span><br><span class="line">        character.WeaponId = id;</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类Character:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Character</span><br><span class="line">&#123;</span><br><span class="line">    //举个栗子</span><br><span class="line">    public string Name = &quot;说的道理&quot;;</span><br><span class="line">    public int Level = 1;</span><br><span class="line">    public int Exp = 0;//经验</span><br><span class="line">    //升级所需经验</span><br><span class="line">    public int GetNextlevelExp()&#123;</span><br><span class="line">        return Level * 50;//升级公式</span><br><span class="line">    &#125;</span><br><span class="line">    public int Hp=0;//血量</span><br><span class="line">    public int MaxHp = 100;//最大血量</span><br><span class="line">    public int  WeaponId = 0;//玩家持有的武器的id</span><br><span class="line">    public List&lt;Skill&gt; SkillList = new List&lt;int&gt;();//技能 </span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line">//Character名称容易与其他组件重复，可以使用namespace命令空间或加后缀</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Tips</title>
    <url>/2024/02/23/tips/</url>
    <content><![CDATA[<h1 id="本博客正在建设中！"><a href="#本博客正在建设中！" class="headerlink" title="本博客正在建设中！"></a>本博客正在建设中！</h1>]]></content>
      <categories>
        <category>tip</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>npm博客自建图床</title>
    <url>/2024/03/16/npm%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>**参考教程：<a href="https://blog.xxfer.cn/posts/a008ab16.html">npm 自建免费图床方案</a></p>
<h1 id="Npm图床"><a href="#Npm图床" class="headerlink" title="Npm图床"></a>Npm图床</h1><p>Tips:此图床使用时可能不稳定</p>
<h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><h3 id="1-注册npm账户"><a href="#1-注册npm账户" class="headerlink" title="1.注册npm账户"></a>1.注册npm账户</h3><ul>
<li>进入<a href="https://npmjs.com/">npm官网</a>，注册一个账号。</li>
<li>注册完进入主页，点击右上角头像，再点击 Access Token<br><img src="https://www.freeimg.cn/i/2024/03/17/65f64c6a5b313.png" alt="主页"></li>
<li>然后点击 Generate New Token，选择 Classic Token。在页面里随意填写一个名字，勾选 Automation，点击 Generate Token 生成令牌。<br><img src="https://www.freeimg.cn/i/2024/03/17/65f64ccf7557e.png" alt="令牌"></li>
</ul>
<p><strong>一定要将生成后的令牌保存好，令牌只显示一次。</strong></p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li>首先注册一个Github账号（登不上用加速器）</li>
<li>进入<a href="https://github.com/">Github主页</a>创建一个新仓库，名字，权限随意</li>
<li><strong>进入仓库</strong>，选择 Settings，选择 Secrets and variables中的 Actions(<strong>是仓库里的Settings，不是主页的Settings！</strong>)<br><img src="https://www.freeimg.cn/i/2024/03/17/65f6531700da3.png" alt="Actions"></li>
<li>点击 New repository secret 添加一个新的 Secret<br><img src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret2.png" alt="Secret"></li>
<li>Name 填写 NPM_TOKEN，Secret 填写前面获取的 npm 令牌</li>
<li>然后再仓库<strong>根目录</strong>新建package.json:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">name 必须要小写</span><br><span class="line">version 随意</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的npm包名称（随意）&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;版本，建议1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;包描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;作者&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<img src="https://www.freeimg.cn/i/2024/03/17/65f6542cd37e7.png" alt="package.json"><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3></li>
<li>打开终端或git终端，把你的仓库克隆</li>
<li>在你的github新仓库点击<strong>绿色按钮code</strong>，点击SSH：<br><img src="https://www.freeimg.cn/i/2024/03/17/65f654af556e9.png" alt="clone"></li>
<li>把显示的代码拷贝下来(显示的代码一般为<a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a>:你的用户名/仓库名称.git)，打开终端或git 终端，输入以下代码：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [你拷贝下来的东西]</span><br></pre></td></tr></table></figure></li>
<li>等待拷贝完成。</li>
<li>在 clone 下来的文件夹内打开终端，输入以下指令切换回原生源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure></li>
<li>添加本地 npm 用户设置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure>
运行npm初始化指令（npm init）<strong>注意，请确认你的包名没有和他人重复,可以在 npm 官网搜索相应包名，搜不到就说明还没被占用。</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li>
<li>接着按照指示填写：<br>运行后出现package name:填写你的包名</li>
<li>version:填写(1.0.0)</li>
<li>description:填写描述，不填也行</li>
<li>entry point:默认</li>
<li>test command:默认</li>
<li>git repository:github图床仓库地址，不填也行</li>
<li>keywords:关键字，不填也行</li>
<li>author:作者</li>
<li>license:默认<br>最后会输出一段package.json，然后会显示Is this OK？（yes）输入yes，结束。<br>最后输入发布指令，把包发布到npm上：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<h3 id="如何访问图片"><a href="#如何访问图片" class="headerlink" title="如何访问图片"></a>如何访问图片</h3>例如：在仓库里新建一个image文件夹，里面放置图片，那么访问链接为：<br><a href="https://gcore.jsdelivr.net/npm/[%E5%8C%85%E5%90%8D]/image/xxx.png">https://gcore.jsdelivr.net/npm/[包名]/image/xxx.png</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使XTC手表刷入第三方APP</title>
    <url>/2024/07/11/%E5%A6%82%E4%BD%95%E4%BD%BFXTC%E6%89%8B%E8%A1%A8%E5%88%B7%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9APP/</url>
    <content><![CDATA[<p>侵删<br><strong>注意，在此之前，您应先利用Root手表等方式解除XTC在安装APP方面的一切障碍</strong></p>
<h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><p><strong>ADB：Android 调试桥 (Android Debug Bridge) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作，例如安装和调试应用。adb 提供对 Unix shell（可用来在设****备上运行各种命令）的访问权限</strong><br><strong>XTC：一坨狗屎</strong></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>一个已经root的手表</li>
<li>一个聪慧的脑袋</li>
<li>一个对应型号的四点线</li>
<li>一台电脑<h2 id="安装ADB"><a href="#安装ADB" class="headerlink" title="安装ADB"></a>安装ADB</h2><h3 id="下载ADB"><a href="#下载ADB" class="headerlink" title="下载ADB"></a>下载ADB</h3>此链接来自谷歌<br><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">Windows</a><br><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">Mac</a><br><a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">Linux</a><br><img src="https://s21.ax1x.com/2024/07/11/pkhwpcR.png"><br>解压刚才下载的文件<br>我的安装路径为<strong>C:\Users\root\Downloads\Compressed\platform-tools-latest-windows\platform-tools</strong><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3>按下Windows键，检索”编辑系统环境变量”<br><img src="https://s21.ax1x.com/2024/07/11/pkhwEND.png"><br>点击<strong>环境变量</strong>，<strong>系统变量</strong>,<strong>点击Path</strong>,<strong>键入你的ADB安装路径，我的是C:\Users\root\Downloads\Compressed\platform-tools-latest-windows\platform-tools</strong><br><img src="https://s21.ax1x.com/2024/07/11/pkhwG4g.png"><br><img src="https://s21.ax1x.com/2024/07/11/pkhw8US.png"><br><img src="https://s21.ax1x.com/2024/07/11/pkhwYCQ.png"><br>此时按键盘上的Windows+R键，唤出运行，键入”cmd”,输入 adb version ，显示 adb 版本，说明安装成功<br>如果显示<strong>不是内部或外部命令，也不是可运行的程序或批处理文件。</strong>,请检查各步骤<h3 id="操作XTC手表"><a href="#操作XTC手表" class="headerlink" title="操作XTC手表"></a>操作XTC手表</h3>下载你想要的应用程序安装包(.apk文件)，Windows+R键呼出cmd，键入”adb install .apk文件路径”<br>看到<strong>success</strong>,说明你从成功了<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3>如果你正在安装一个签名错误的apk文件，adb可能报错<br>如果你安装的app在手表上已经存在，且将要安装的版本比在手表上的版本低，则adb报错 可以使用adb install -r -d -g apk路径解决<br>如果出现device not found 则是手表没有开启adb或四点线没接稳 可以在手表拨号*#0769651#*打开ADB</li>
</ul>
]]></content>
      <categories>
        <category>XTC</category>
      </categories>
      <tags>
        <tag>XTC</tag>
      </tags>
  </entry>
</search>
